Terminals unused in grammar

   C_FUNCTION
   USE
   COLON
   SEMICOLON
   LEFT_BRACKET
   RIGHT_BRACKET
   IN


状態 56 conflicts: 1 shift/reduce


文法

    0 $accept: program "end of file"

    1 program: block

    2 block: lines

    3 lines: line
    4      | lines line

    5 line: line_content EOL
    6     | line_content "end of file"
    7     | definition
    8     | import

    9 import: IMPORT STRING_LITERAL EOL

   10 line_content: expression

   11 definition: function_definition
   12           | class_definition
   13           | c_type_definition
   14           | globals_definition
   15           | c_function_declaration

   16 function_definition: function_start arguments EOL block return_value EOL
   17                    | function_start arguments EOL return_value EOL

   18 function_start: FUNCTION_DEFINITION

   19 class_definition: class_start arguments EOL members_definition methods
   20                 | class_start arguments EOL members_definition
   21                 | class_start arguments EOL methods

   22 class_start: CLASS_DEFINITION

   23 c_type_definition: c_type_start EOL C_members_definition

   24 c_type_start: C_TYPE_DEFINITION

   25 methods: method_definition EOL
   26        | methods method_definition EOL

   27 method_definition: METHOD_DEFINITION arguments EOL block return_value

   28 members_definition: MEMBER_IDENTIFIER EQUAL expression EOL
   29                   | members_definition MEMBER_IDENTIFIER EQUAL expression EOL
   30                   | EOL

   31 C_members_definition: MEMBER_IDENTIFIER EQUAL C_type_identifier EOL
   32                     | C_members_definition MEMBER_IDENTIFIER EQUAL C_type_identifier EOL

   33 C_type_identifier: IDENTIFIER
   34                  | C_type_identifier IDENTIFIER

   35 C_arguments: C_type_identifier
   36            | C_arguments COMMA C_type_identifier

   37 C_returns: C_type_identifier

   38 return_value: RETURN expression
   39             | RETURN

   40 arguments: LEFT_PARENTHESIS definition_arguments RIGHT_PARENTHESIS
   41          | LEFT_PARENTHESIS RIGHT_PARENTHESIS

   42 definition_arguments: IDENTIFIER
   43                     | definition_arguments COMMA IDENTIFIER
   44                     | %empty

   45 globals_definition: global_start EOL LEFT_PARENTHESIS EOL globals_variables EOL RIGHT_PARENTHESIS EOL

   46 global_start: GLOBAL

   47 globals_variables: assign_variable
   48                  | globals_variables EOL assign_variable

   49 c_function_declaration: C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT C_arguments EOL C_FUNCTION_RETURN C_returns EOL
   50                       | C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT EOL C_FUNCTION_RETURN C_returns EOL

   51 expressions: expression
   52            | expressions COMMA expression

   53 if_start: IF

   54 else_start: ELSE

   55 for_start: FOR expression COMMA expression COMMA expression

   56 while_start: WHILE expression

   57 expression: if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   60           | while_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   61           | assign_variable
   62           | expression ARROW expression
   63           | expression PLUS expression
   64           | expression MINUS expression
   65           | expression ASTERISK expression
   66           | expression SLASH expression
   67           | expression OP_AND expression
   68           | expression OP_OR expression
   69           | expression OP_MORE_EQUAL expression
   70           | expression OP_LESS_EQUAL expression
   71           | expression OP_MORE expression
   72           | expression OP_LESS expression
   73           | expression OP_NOT_EQUAL expression
   74           | expression OP_EQUAL expression
   75           | monomial
   76           | list
   77           | access

   78 list: LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   79     | LEFT_CURLY_BRACE RIGHT_CURLY_BRACE

   80 access: expression DOT_IDENTIFIER

   81 assign_variable: IDENTIFIER EQUAL expression
   82                | access EQUAL expression

   83 monomial: call
   84         | STRING_LITERAL
   85         | FLOAT_LITERAL
   86         | INT_LITERAL
   87         | variable

   88 call: IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90     | access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   91     | access LEFT_PARENTHESIS RIGHT_PARENTHESIS

   92 variable: IDENTIFIER


出現位置の規則による終端

"end of file" (0) 0 6
error (256)
FUNCTION_DEFINITION (258) 18
METHOD_DEFINITION (259) 27
CLASS_DEFINITION (260) 22
C_TYPE_DEFINITION (261) 24
C_FUNCTION_DECLARATION (262) 49 50
RETURN (263) 38 39
C_FUNCTION (264)
MEMBER_IDENTIFIER (265) 28 29 31 32
IDENTIFIER (266) 33 34 42 43 81 88 89 92
EQUAL (267) 28 29 31 32 81 82
ARROW (268) 62
OP_AND (269) 67
OP_OR (270) 68
OP_EQUAL (271) 74
OP_NOT_EQUAL (272) 73
OP_MORE_EQUAL (273) 69
OP_LESS_EQUAL (274) 70
OP_MORE (275) 71
OP_LESS (276) 72
PLUS (277) 63
MINUS (278) 64
ASTERISK (279) 65
SLASH (280) 66
DOT_IDENTIFIER (281) 80
USE (282)
COLON (283)
SEMICOLON (284)
COMMA (285) 36 43 52 55
LEFT_PARENTHESIS (286) 40 41 45 57 58 59 60 88 89 90 91
RIGHT_PARENTHESIS (287) 40 41 45 57 58 59 60 88 89 90 91
LEFT_CURLY_BRACE (288) 78 79
RIGHT_CURLY_BRACE (289) 78 79
LEFT_BRACKET (290)
RIGHT_BRACKET (291)
IF (292) 53
ELSE (293) 54
FOR (294) 55
IN (295)
WHILE (296) 56
GLOBAL (297) 46
IMPORT (298) 9
C_FUNCTION_ARGUMENT (299) 49 50
C_FUNCTION_RETURN (300) 49 50
EOL (301) 5 9 16 17 19 20 21 23 25 26 27 28 29 30 31 32 45 48 49 50
    57 58 59 60
STRING_LITERAL (302) 9 84
INT_LITERAL (303) 86
FLOAT_LITERAL (304) 85


出現位置の規則による非終端

$accept (50)
    左辺: 0
program (51)
    左辺: 1, 右辺: 0
block (52)
    左辺: 2, 右辺: 1 16 27 57 58 59 60
lines (53)
    左辺: 3 4, 右辺: 2 4
line (54)
    左辺: 5 6 7 8, 右辺: 3 4
import (55)
    左辺: 9, 右辺: 8
line_content (56)
    左辺: 10, 右辺: 5 6
definition (57)
    左辺: 11 12 13 14 15, 右辺: 7
function_definition (58)
    左辺: 16 17, 右辺: 11
function_start (59)
    左辺: 18, 右辺: 16 17
class_definition (60)
    左辺: 19 20 21, 右辺: 12
class_start (61)
    左辺: 22, 右辺: 19 20 21
c_type_definition (62)
    左辺: 23, 右辺: 13
c_type_start (63)
    左辺: 24, 右辺: 23
methods (64)
    左辺: 25 26, 右辺: 19 21 26
method_definition (65)
    左辺: 27, 右辺: 25 26
members_definition (66)
    左辺: 28 29 30, 右辺: 19 20 29
C_members_definition (67)
    左辺: 31 32, 右辺: 23 32
C_type_identifier (68)
    左辺: 33 34, 右辺: 31 32 34 35 36 37
C_arguments (69)
    左辺: 35 36, 右辺: 36 49
C_returns (70)
    左辺: 37, 右辺: 49 50
return_value (71)
    左辺: 38 39, 右辺: 16 17 27
arguments (72)
    左辺: 40 41, 右辺: 16 17 19 20 21 27
definition_arguments (73)
    左辺: 42 43 44, 右辺: 40 43
globals_definition (74)
    左辺: 45, 右辺: 14
global_start (75)
    左辺: 46, 右辺: 45
globals_variables (76)
    左辺: 47 48, 右辺: 45 48
c_function_declaration (77)
    左辺: 49 50, 右辺: 15
expressions (78)
    左辺: 51 52, 右辺: 52 78 88 90
if_start (79)
    左辺: 53, 右辺: 57
else_start (80)
    左辺: 54, 右辺: 58
for_start (81)
    左辺: 55, 右辺: 59
while_start (82)
    左辺: 56, 右辺: 60
expression (83)
    左辺: 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75
    76 77, 右辺: 10 28 29 38 51 52 55 56 57 62 63 64 65 66 67 68
    69 70 71 72 73 74 80 81 82
list (84)
    左辺: 78 79, 右辺: 76
access (85)
    左辺: 80, 右辺: 77 82 90 91
assign_variable (86)
    左辺: 81 82, 右辺: 47 48 61
monomial (87)
    左辺: 83 84 85 86 87, 右辺: 75
call (88)
    左辺: 88 89 90 91, 右辺: 83
variable (89)
    左辺: 92, 右辺: 87


State 0

    0 $accept: . program "end of file"
    1 program: . block
    2 block: . lines
    3 lines: . line
    4      | . lines line
    5 line: . line_content EOL
    6     | . line_content "end of file"
    7     | . definition
    8     | . import
    9 import: . IMPORT STRING_LITERAL EOL
   10 line_content: . expression
   11 definition: . function_definition
   12           | . class_definition
   13           | . c_type_definition
   14           | . globals_definition
   15           | . c_function_declaration
   16 function_definition: . function_start arguments EOL block return_value EOL
   17                    | . function_start arguments EOL return_value EOL
   18 function_start: . FUNCTION_DEFINITION
   19 class_definition: . class_start arguments EOL members_definition methods
   20                 | . class_start arguments EOL members_definition
   21                 | . class_start arguments EOL methods
   22 class_start: . CLASS_DEFINITION
   23 c_type_definition: . c_type_start EOL C_members_definition
   24 c_type_start: . C_TYPE_DEFINITION
   45 globals_definition: . global_start EOL LEFT_PARENTHESIS EOL globals_variables EOL RIGHT_PARENTHESIS EOL
   46 global_start: . GLOBAL
   49 c_function_declaration: . C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT C_arguments EOL C_FUNCTION_RETURN C_returns EOL
   50                       | . C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT EOL C_FUNCTION_RETURN C_returns EOL
   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 while_start: . WHILE expression
   57 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   60           | . while_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   61           | . assign_variable
   62           | . expression ARROW expression
   63           | . expression PLUS expression
   64           | . expression MINUS expression
   65           | . expression ASTERISK expression
   66           | . expression SLASH expression
   67           | . expression OP_AND expression
   68           | . expression OP_OR expression
   69           | . expression OP_MORE_EQUAL expression
   70           | . expression OP_LESS_EQUAL expression
   71           | . expression OP_MORE expression
   72           | . expression OP_LESS expression
   73           | . expression OP_NOT_EQUAL expression
   74           | . expression OP_EQUAL expression
   75           | . monomial
   76           | . list
   77           | . access
   78 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   79     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   80 access: . expression DOT_IDENTIFIER
   81 assign_variable: . IDENTIFIER EQUAL expression
   82                | . access EQUAL expression
   83 monomial: . call
   84         | . STRING_LITERAL
   85         | . FLOAT_LITERAL
   86         | . INT_LITERAL
   87         | . variable
   88 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   91     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   92 variable: . IDENTIFIER

    FUNCTION_DEFINITION     shift, and go to state 1
    CLASS_DEFINITION        shift, and go to state 2
    C_TYPE_DEFINITION       shift, and go to state 3
    C_FUNCTION_DECLARATION  shift, and go to state 4
    IDENTIFIER              shift, and go to state 5
    LEFT_CURLY_BRACE        shift, and go to state 6
    IF                      shift, and go to state 7
    ELSE                    shift, and go to state 8
    FOR                     shift, and go to state 9
    WHILE                   shift, and go to state 10
    GLOBAL                  shift, and go to state 11
    IMPORT                  shift, and go to state 12
    STRING_LITERAL          shift, and go to state 13
    INT_LITERAL             shift, and go to state 14
    FLOAT_LITERAL           shift, and go to state 15

    program                 go to state 16
    block                   go to state 17
    lines                   go to state 18
    line                    go to state 19
    import                  go to state 20
    line_content            go to state 21
    definition              go to state 22
    function_definition     go to state 23
    function_start          go to state 24
    class_definition        go to state 25
    class_start             go to state 26
    c_type_definition       go to state 27
    c_type_start            go to state 28
    globals_definition      go to state 29
    global_start            go to state 30
    c_function_declaration  go to state 31
    if_start                go to state 32
    else_start              go to state 33
    for_start               go to state 34
    while_start             go to state 35
    expression              go to state 36
    list                    go to state 37
    access                  go to state 38
    assign_variable         go to state 39
    monomial                go to state 40
    call                    go to state 41
    variable                go to state 42


State 1

   18 function_start: FUNCTION_DEFINITION .

    $default  reduce using rule 18 (function_start)


State 2

   22 class_start: CLASS_DEFINITION .

    $default  reduce using rule 22 (class_start)


State 3

   24 c_type_start: C_TYPE_DEFINITION .

    $default  reduce using rule 24 (c_type_start)


State 4

   49 c_function_declaration: C_FUNCTION_DECLARATION . EOL C_FUNCTION_ARGUMENT C_arguments EOL C_FUNCTION_RETURN C_returns EOL
   50                       | C_FUNCTION_DECLARATION . EOL C_FUNCTION_ARGUMENT EOL C_FUNCTION_RETURN C_returns EOL

    EOL  shift, and go to state 43


State 5

   81 assign_variable: IDENTIFIER . EQUAL expression
   88 call: IDENTIFIER . LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | IDENTIFIER . LEFT_PARENTHESIS RIGHT_PARENTHESIS
   92 variable: IDENTIFIER .  ["end of file", ARROW, OP_AND, OP_OR, OP_EQUAL, OP_NOT_EQUAL, OP_MORE_EQUAL, OP_LESS_EQUAL, OP_MORE, OP_LESS, PLUS, MINUS, ASTERISK, SLASH, DOT_IDENTIFIER, COMMA, RIGHT_PARENTHESIS, RIGHT_CURLY_BRACE, EOL]

    EQUAL             shift, and go to state 44
    LEFT_PARENTHESIS  shift, and go to state 45

    $default  reduce using rule 92 (variable)


State 6

   51 expressions: . expression
   52            | . expressions COMMA expression
   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 while_start: . WHILE expression
   57 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   60           | . while_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   61           | . assign_variable
   62           | . expression ARROW expression
   63           | . expression PLUS expression
   64           | . expression MINUS expression
   65           | . expression ASTERISK expression
   66           | . expression SLASH expression
   67           | . expression OP_AND expression
   68           | . expression OP_OR expression
   69           | . expression OP_MORE_EQUAL expression
   70           | . expression OP_LESS_EQUAL expression
   71           | . expression OP_MORE expression
   72           | . expression OP_LESS expression
   73           | . expression OP_NOT_EQUAL expression
   74           | . expression OP_EQUAL expression
   75           | . monomial
   76           | . list
   77           | . access
   78 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   78     | LEFT_CURLY_BRACE . expressions RIGHT_CURLY_BRACE
   79     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   79     | LEFT_CURLY_BRACE . RIGHT_CURLY_BRACE
   80 access: . expression DOT_IDENTIFIER
   81 assign_variable: . IDENTIFIER EQUAL expression
   82                | . access EQUAL expression
   83 monomial: . call
   84         | . STRING_LITERAL
   85         | . FLOAT_LITERAL
   86         | . INT_LITERAL
   87         | . variable
   88 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   91     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   92 variable: . IDENTIFIER

    IDENTIFIER         shift, and go to state 5
    LEFT_CURLY_BRACE   shift, and go to state 6
    RIGHT_CURLY_BRACE  shift, and go to state 46
    IF                 shift, and go to state 7
    ELSE               shift, and go to state 8
    FOR                shift, and go to state 9
    WHILE              shift, and go to state 10
    STRING_LITERAL     shift, and go to state 13
    INT_LITERAL        shift, and go to state 14
    FLOAT_LITERAL      shift, and go to state 15

    expressions      go to state 47
    if_start         go to state 32
    else_start       go to state 33
    for_start        go to state 34
    while_start      go to state 35
    expression       go to state 48
    list             go to state 37
    access           go to state 38
    assign_variable  go to state 39
    monomial         go to state 40
    call             go to state 41
    variable         go to state 42


State 7

   53 if_start: IF .

    $default  reduce using rule 53 (if_start)


State 8

   54 else_start: ELSE .

    $default  reduce using rule 54 (else_start)


State 9

   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   55          | FOR . expression COMMA expression COMMA expression
   56 while_start: . WHILE expression
   57 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   60           | . while_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   61           | . assign_variable
   62           | . expression ARROW expression
   63           | . expression PLUS expression
   64           | . expression MINUS expression
   65           | . expression ASTERISK expression
   66           | . expression SLASH expression
   67           | . expression OP_AND expression
   68           | . expression OP_OR expression
   69           | . expression OP_MORE_EQUAL expression
   70           | . expression OP_LESS_EQUAL expression
   71           | . expression OP_MORE expression
   72           | . expression OP_LESS expression
   73           | . expression OP_NOT_EQUAL expression
   74           | . expression OP_EQUAL expression
   75           | . monomial
   76           | . list
   77           | . access
   78 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   79     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   80 access: . expression DOT_IDENTIFIER
   81 assign_variable: . IDENTIFIER EQUAL expression
   82                | . access EQUAL expression
   83 monomial: . call
   84         | . STRING_LITERAL
   85         | . FLOAT_LITERAL
   86         | . INT_LITERAL
   87         | . variable
   88 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   91     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   92 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    WHILE             shift, and go to state 10
    STRING_LITERAL    shift, and go to state 13
    INT_LITERAL       shift, and go to state 14
    FLOAT_LITERAL     shift, and go to state 15

    if_start         go to state 32
    else_start       go to state 33
    for_start        go to state 34
    while_start      go to state 35
    expression       go to state 49
    list             go to state 37
    access           go to state 38
    assign_variable  go to state 39
    monomial         go to state 40
    call             go to state 41
    variable         go to state 42


State 10

   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 while_start: . WHILE expression
   56            | WHILE . expression
   57 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   60           | . while_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   61           | . assign_variable
   62           | . expression ARROW expression
   63           | . expression PLUS expression
   64           | . expression MINUS expression
   65           | . expression ASTERISK expression
   66           | . expression SLASH expression
   67           | . expression OP_AND expression
   68           | . expression OP_OR expression
   69           | . expression OP_MORE_EQUAL expression
   70           | . expression OP_LESS_EQUAL expression
   71           | . expression OP_MORE expression
   72           | . expression OP_LESS expression
   73           | . expression OP_NOT_EQUAL expression
   74           | . expression OP_EQUAL expression
   75           | . monomial
   76           | . list
   77           | . access
   78 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   79     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   80 access: . expression DOT_IDENTIFIER
   81 assign_variable: . IDENTIFIER EQUAL expression
   82                | . access EQUAL expression
   83 monomial: . call
   84         | . STRING_LITERAL
   85         | . FLOAT_LITERAL
   86         | . INT_LITERAL
   87         | . variable
   88 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   91     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   92 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    WHILE             shift, and go to state 10
    STRING_LITERAL    shift, and go to state 13
    INT_LITERAL       shift, and go to state 14
    FLOAT_LITERAL     shift, and go to state 15

    if_start         go to state 32
    else_start       go to state 33
    for_start        go to state 34
    while_start      go to state 35
    expression       go to state 50
    list             go to state 37
    access           go to state 38
    assign_variable  go to state 39
    monomial         go to state 40
    call             go to state 41
    variable         go to state 42


State 11

   46 global_start: GLOBAL .

    $default  reduce using rule 46 (global_start)


State 12

    9 import: IMPORT . STRING_LITERAL EOL

    STRING_LITERAL  shift, and go to state 51


State 13

   84 monomial: STRING_LITERAL .

    $default  reduce using rule 84 (monomial)


State 14

   86 monomial: INT_LITERAL .

    $default  reduce using rule 86 (monomial)


State 15

   85 monomial: FLOAT_LITERAL .

    $default  reduce using rule 85 (monomial)


State 16

    0 $accept: program . "end of file"

    "end of file"  shift, and go to state 52


State 17

    1 program: block .

    $default  reduce using rule 1 (program)


State 18

    2 block: lines .  ["end of file", RETURN, RIGHT_PARENTHESIS]
    4 lines: lines . line
    5 line: . line_content EOL
    6     | . line_content "end of file"
    7     | . definition
    8     | . import
    9 import: . IMPORT STRING_LITERAL EOL
   10 line_content: . expression
   11 definition: . function_definition
   12           | . class_definition
   13           | . c_type_definition
   14           | . globals_definition
   15           | . c_function_declaration
   16 function_definition: . function_start arguments EOL block return_value EOL
   17                    | . function_start arguments EOL return_value EOL
   18 function_start: . FUNCTION_DEFINITION
   19 class_definition: . class_start arguments EOL members_definition methods
   20                 | . class_start arguments EOL members_definition
   21                 | . class_start arguments EOL methods
   22 class_start: . CLASS_DEFINITION
   23 c_type_definition: . c_type_start EOL C_members_definition
   24 c_type_start: . C_TYPE_DEFINITION
   45 globals_definition: . global_start EOL LEFT_PARENTHESIS EOL globals_variables EOL RIGHT_PARENTHESIS EOL
   46 global_start: . GLOBAL
   49 c_function_declaration: . C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT C_arguments EOL C_FUNCTION_RETURN C_returns EOL
   50                       | . C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT EOL C_FUNCTION_RETURN C_returns EOL
   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 while_start: . WHILE expression
   57 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   60           | . while_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   61           | . assign_variable
   62           | . expression ARROW expression
   63           | . expression PLUS expression
   64           | . expression MINUS expression
   65           | . expression ASTERISK expression
   66           | . expression SLASH expression
   67           | . expression OP_AND expression
   68           | . expression OP_OR expression
   69           | . expression OP_MORE_EQUAL expression
   70           | . expression OP_LESS_EQUAL expression
   71           | . expression OP_MORE expression
   72           | . expression OP_LESS expression
   73           | . expression OP_NOT_EQUAL expression
   74           | . expression OP_EQUAL expression
   75           | . monomial
   76           | . list
   77           | . access
   78 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   79     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   80 access: . expression DOT_IDENTIFIER
   81 assign_variable: . IDENTIFIER EQUAL expression
   82                | . access EQUAL expression
   83 monomial: . call
   84         | . STRING_LITERAL
   85         | . FLOAT_LITERAL
   86         | . INT_LITERAL
   87         | . variable
   88 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   91     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   92 variable: . IDENTIFIER

    FUNCTION_DEFINITION     shift, and go to state 1
    CLASS_DEFINITION        shift, and go to state 2
    C_TYPE_DEFINITION       shift, and go to state 3
    C_FUNCTION_DECLARATION  shift, and go to state 4
    IDENTIFIER              shift, and go to state 5
    LEFT_CURLY_BRACE        shift, and go to state 6
    IF                      shift, and go to state 7
    ELSE                    shift, and go to state 8
    FOR                     shift, and go to state 9
    WHILE                   shift, and go to state 10
    GLOBAL                  shift, and go to state 11
    IMPORT                  shift, and go to state 12
    STRING_LITERAL          shift, and go to state 13
    INT_LITERAL             shift, and go to state 14
    FLOAT_LITERAL           shift, and go to state 15

    $default  reduce using rule 2 (block)

    line                    go to state 53
    import                  go to state 20
    line_content            go to state 21
    definition              go to state 22
    function_definition     go to state 23
    function_start          go to state 24
    class_definition        go to state 25
    class_start             go to state 26
    c_type_definition       go to state 27
    c_type_start            go to state 28
    globals_definition      go to state 29
    global_start            go to state 30
    c_function_declaration  go to state 31
    if_start                go to state 32
    else_start              go to state 33
    for_start               go to state 34
    while_start             go to state 35
    expression              go to state 36
    list                    go to state 37
    access                  go to state 38
    assign_variable         go to state 39
    monomial                go to state 40
    call                    go to state 41
    variable                go to state 42


State 19

    3 lines: line .

    $default  reduce using rule 3 (lines)


State 20

    8 line: import .

    $default  reduce using rule 8 (line)


State 21

    5 line: line_content . EOL
    6     | line_content . "end of file"

    "end of file"  shift, and go to state 54
    EOL            shift, and go to state 55


State 22

    7 line: definition .

    $default  reduce using rule 7 (line)


State 23

   11 definition: function_definition .

    $default  reduce using rule 11 (definition)


State 24

   16 function_definition: function_start . arguments EOL block return_value EOL
   17                    | function_start . arguments EOL return_value EOL
   40 arguments: . LEFT_PARENTHESIS definition_arguments RIGHT_PARENTHESIS
   41          | . LEFT_PARENTHESIS RIGHT_PARENTHESIS

    LEFT_PARENTHESIS  shift, and go to state 56

    arguments  go to state 57


State 25

   12 definition: class_definition .

    $default  reduce using rule 12 (definition)


State 26

   19 class_definition: class_start . arguments EOL members_definition methods
   20                 | class_start . arguments EOL members_definition
   21                 | class_start . arguments EOL methods
   40 arguments: . LEFT_PARENTHESIS definition_arguments RIGHT_PARENTHESIS
   41          | . LEFT_PARENTHESIS RIGHT_PARENTHESIS

    LEFT_PARENTHESIS  shift, and go to state 56

    arguments  go to state 58


State 27

   13 definition: c_type_definition .

    $default  reduce using rule 13 (definition)


State 28

   23 c_type_definition: c_type_start . EOL C_members_definition

    EOL  shift, and go to state 59


State 29

   14 definition: globals_definition .

    $default  reduce using rule 14 (definition)


State 30

   45 globals_definition: global_start . EOL LEFT_PARENTHESIS EOL globals_variables EOL RIGHT_PARENTHESIS EOL

    EOL  shift, and go to state 60


State 31

   15 definition: c_function_declaration .

    $default  reduce using rule 15 (definition)


State 32

   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 while_start: . WHILE expression
   57 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   57           | if_start . expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   60           | . while_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   61           | . assign_variable
   62           | . expression ARROW expression
   63           | . expression PLUS expression
   64           | . expression MINUS expression
   65           | . expression ASTERISK expression
   66           | . expression SLASH expression
   67           | . expression OP_AND expression
   68           | . expression OP_OR expression
   69           | . expression OP_MORE_EQUAL expression
   70           | . expression OP_LESS_EQUAL expression
   71           | . expression OP_MORE expression
   72           | . expression OP_LESS expression
   73           | . expression OP_NOT_EQUAL expression
   74           | . expression OP_EQUAL expression
   75           | . monomial
   76           | . list
   77           | . access
   78 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   79     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   80 access: . expression DOT_IDENTIFIER
   81 assign_variable: . IDENTIFIER EQUAL expression
   82                | . access EQUAL expression
   83 monomial: . call
   84         | . STRING_LITERAL
   85         | . FLOAT_LITERAL
   86         | . INT_LITERAL
   87         | . variable
   88 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   91     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   92 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    WHILE             shift, and go to state 10
    STRING_LITERAL    shift, and go to state 13
    INT_LITERAL       shift, and go to state 14
    FLOAT_LITERAL     shift, and go to state 15

    if_start         go to state 32
    else_start       go to state 33
    for_start        go to state 34
    while_start      go to state 35
    expression       go to state 61
    list             go to state 37
    access           go to state 38
    assign_variable  go to state 39
    monomial         go to state 40
    call             go to state 41
    variable         go to state 42


State 33

   58 expression: else_start . EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS

    EOL  shift, and go to state 62


State 34

   59 expression: for_start . EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS

    EOL  shift, and go to state 63


State 35

   60 expression: while_start . EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS

    EOL  shift, and go to state 64


State 36

   10 line_content: expression .  ["end of file", EOL]
   62 expression: expression . ARROW expression
   63           | expression . PLUS expression
   64           | expression . MINUS expression
   65           | expression . ASTERISK expression
   66           | expression . SLASH expression
   67           | expression . OP_AND expression
   68           | expression . OP_OR expression
   69           | expression . OP_MORE_EQUAL expression
   70           | expression . OP_LESS_EQUAL expression
   71           | expression . OP_MORE expression
   72           | expression . OP_LESS expression
   73           | expression . OP_NOT_EQUAL expression
   74           | expression . OP_EQUAL expression
   80 access: expression . DOT_IDENTIFIER

    ARROW           shift, and go to state 65
    OP_AND          shift, and go to state 66
    OP_OR           shift, and go to state 67
    OP_EQUAL        shift, and go to state 68
    OP_NOT_EQUAL    shift, and go to state 69
    OP_MORE_EQUAL   shift, and go to state 70
    OP_LESS_EQUAL   shift, and go to state 71
    OP_MORE         shift, and go to state 72
    OP_LESS         shift, and go to state 73
    PLUS            shift, and go to state 74
    MINUS           shift, and go to state 75
    ASTERISK        shift, and go to state 76
    SLASH           shift, and go to state 77
    DOT_IDENTIFIER  shift, and go to state 78

    $default  reduce using rule 10 (line_content)


State 37

   76 expression: list .

    $default  reduce using rule 76 (expression)


State 38

   77 expression: access .  ["end of file", ARROW, OP_AND, OP_OR, OP_EQUAL, OP_NOT_EQUAL, OP_MORE_EQUAL, OP_LESS_EQUAL, OP_MORE, OP_LESS, PLUS, MINUS, ASTERISK, SLASH, DOT_IDENTIFIER, COMMA, RIGHT_PARENTHESIS, RIGHT_CURLY_BRACE, EOL]
   82 assign_variable: access . EQUAL expression
   90 call: access . LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   91     | access . LEFT_PARENTHESIS RIGHT_PARENTHESIS

    EQUAL             shift, and go to state 79
    LEFT_PARENTHESIS  shift, and go to state 80

    $default  reduce using rule 77 (expression)


State 39

   61 expression: assign_variable .

    $default  reduce using rule 61 (expression)


State 40

   75 expression: monomial .

    $default  reduce using rule 75 (expression)


State 41

   83 monomial: call .

    $default  reduce using rule 83 (monomial)


State 42

   87 monomial: variable .

    $default  reduce using rule 87 (monomial)


State 43

   49 c_function_declaration: C_FUNCTION_DECLARATION EOL . C_FUNCTION_ARGUMENT C_arguments EOL C_FUNCTION_RETURN C_returns EOL
   50                       | C_FUNCTION_DECLARATION EOL . C_FUNCTION_ARGUMENT EOL C_FUNCTION_RETURN C_returns EOL

    C_FUNCTION_ARGUMENT  shift, and go to state 81


State 44

   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 while_start: . WHILE expression
   57 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   60           | . while_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   61           | . assign_variable
   62           | . expression ARROW expression
   63           | . expression PLUS expression
   64           | . expression MINUS expression
   65           | . expression ASTERISK expression
   66           | . expression SLASH expression
   67           | . expression OP_AND expression
   68           | . expression OP_OR expression
   69           | . expression OP_MORE_EQUAL expression
   70           | . expression OP_LESS_EQUAL expression
   71           | . expression OP_MORE expression
   72           | . expression OP_LESS expression
   73           | . expression OP_NOT_EQUAL expression
   74           | . expression OP_EQUAL expression
   75           | . monomial
   76           | . list
   77           | . access
   78 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   79     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   80 access: . expression DOT_IDENTIFIER
   81 assign_variable: . IDENTIFIER EQUAL expression
   81                | IDENTIFIER EQUAL . expression
   82                | . access EQUAL expression
   83 monomial: . call
   84         | . STRING_LITERAL
   85         | . FLOAT_LITERAL
   86         | . INT_LITERAL
   87         | . variable
   88 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   91     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   92 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    WHILE             shift, and go to state 10
    STRING_LITERAL    shift, and go to state 13
    INT_LITERAL       shift, and go to state 14
    FLOAT_LITERAL     shift, and go to state 15

    if_start         go to state 32
    else_start       go to state 33
    for_start        go to state 34
    while_start      go to state 35
    expression       go to state 82
    list             go to state 37
    access           go to state 38
    assign_variable  go to state 39
    monomial         go to state 40
    call             go to state 41
    variable         go to state 42


State 45

   51 expressions: . expression
   52            | . expressions COMMA expression
   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 while_start: . WHILE expression
   57 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   60           | . while_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   61           | . assign_variable
   62           | . expression ARROW expression
   63           | . expression PLUS expression
   64           | . expression MINUS expression
   65           | . expression ASTERISK expression
   66           | . expression SLASH expression
   67           | . expression OP_AND expression
   68           | . expression OP_OR expression
   69           | . expression OP_MORE_EQUAL expression
   70           | . expression OP_LESS_EQUAL expression
   71           | . expression OP_MORE expression
   72           | . expression OP_LESS expression
   73           | . expression OP_NOT_EQUAL expression
   74           | . expression OP_EQUAL expression
   75           | . monomial
   76           | . list
   77           | . access
   78 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   79     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   80 access: . expression DOT_IDENTIFIER
   81 assign_variable: . IDENTIFIER EQUAL expression
   82                | . access EQUAL expression
   83 monomial: . call
   84         | . STRING_LITERAL
   85         | . FLOAT_LITERAL
   86         | . INT_LITERAL
   87         | . variable
   88 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   88     | IDENTIFIER LEFT_PARENTHESIS . expressions RIGHT_PARENTHESIS
   89     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   89     | IDENTIFIER LEFT_PARENTHESIS . RIGHT_PARENTHESIS
   90     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   91     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   92 variable: . IDENTIFIER

    IDENTIFIER         shift, and go to state 5
    RIGHT_PARENTHESIS  shift, and go to state 83
    LEFT_CURLY_BRACE   shift, and go to state 6
    IF                 shift, and go to state 7
    ELSE               shift, and go to state 8
    FOR                shift, and go to state 9
    WHILE              shift, and go to state 10
    STRING_LITERAL     shift, and go to state 13
    INT_LITERAL        shift, and go to state 14
    FLOAT_LITERAL      shift, and go to state 15

    expressions      go to state 84
    if_start         go to state 32
    else_start       go to state 33
    for_start        go to state 34
    while_start      go to state 35
    expression       go to state 48
    list             go to state 37
    access           go to state 38
    assign_variable  go to state 39
    monomial         go to state 40
    call             go to state 41
    variable         go to state 42


State 46

   79 list: LEFT_CURLY_BRACE RIGHT_CURLY_BRACE .

    $default  reduce using rule 79 (list)


State 47

   52 expressions: expressions . COMMA expression
   78 list: LEFT_CURLY_BRACE expressions . RIGHT_CURLY_BRACE

    COMMA              shift, and go to state 85
    RIGHT_CURLY_BRACE  shift, and go to state 86


State 48

   51 expressions: expression .  [COMMA, RIGHT_PARENTHESIS, RIGHT_CURLY_BRACE]
   62 expression: expression . ARROW expression
   63           | expression . PLUS expression
   64           | expression . MINUS expression
   65           | expression . ASTERISK expression
   66           | expression . SLASH expression
   67           | expression . OP_AND expression
   68           | expression . OP_OR expression
   69           | expression . OP_MORE_EQUAL expression
   70           | expression . OP_LESS_EQUAL expression
   71           | expression . OP_MORE expression
   72           | expression . OP_LESS expression
   73           | expression . OP_NOT_EQUAL expression
   74           | expression . OP_EQUAL expression
   80 access: expression . DOT_IDENTIFIER

    ARROW           shift, and go to state 65
    OP_AND          shift, and go to state 66
    OP_OR           shift, and go to state 67
    OP_EQUAL        shift, and go to state 68
    OP_NOT_EQUAL    shift, and go to state 69
    OP_MORE_EQUAL   shift, and go to state 70
    OP_LESS_EQUAL   shift, and go to state 71
    OP_MORE         shift, and go to state 72
    OP_LESS         shift, and go to state 73
    PLUS            shift, and go to state 74
    MINUS           shift, and go to state 75
    ASTERISK        shift, and go to state 76
    SLASH           shift, and go to state 77
    DOT_IDENTIFIER  shift, and go to state 78

    $default  reduce using rule 51 (expressions)


State 49

   55 for_start: FOR expression . COMMA expression COMMA expression
   62 expression: expression . ARROW expression
   63           | expression . PLUS expression
   64           | expression . MINUS expression
   65           | expression . ASTERISK expression
   66           | expression . SLASH expression
   67           | expression . OP_AND expression
   68           | expression . OP_OR expression
   69           | expression . OP_MORE_EQUAL expression
   70           | expression . OP_LESS_EQUAL expression
   71           | expression . OP_MORE expression
   72           | expression . OP_LESS expression
   73           | expression . OP_NOT_EQUAL expression
   74           | expression . OP_EQUAL expression
   80 access: expression . DOT_IDENTIFIER

    ARROW           shift, and go to state 65
    OP_AND          shift, and go to state 66
    OP_OR           shift, and go to state 67
    OP_EQUAL        shift, and go to state 68
    OP_NOT_EQUAL    shift, and go to state 69
    OP_MORE_EQUAL   shift, and go to state 70
    OP_LESS_EQUAL   shift, and go to state 71
    OP_MORE         shift, and go to state 72
    OP_LESS         shift, and go to state 73
    PLUS            shift, and go to state 74
    MINUS           shift, and go to state 75
    ASTERISK        shift, and go to state 76
    SLASH           shift, and go to state 77
    DOT_IDENTIFIER  shift, and go to state 78
    COMMA           shift, and go to state 87


State 50

   56 while_start: WHILE expression .  [EOL]
   62 expression: expression . ARROW expression
   63           | expression . PLUS expression
   64           | expression . MINUS expression
   65           | expression . ASTERISK expression
   66           | expression . SLASH expression
   67           | expression . OP_AND expression
   68           | expression . OP_OR expression
   69           | expression . OP_MORE_EQUAL expression
   70           | expression . OP_LESS_EQUAL expression
   71           | expression . OP_MORE expression
   72           | expression . OP_LESS expression
   73           | expression . OP_NOT_EQUAL expression
   74           | expression . OP_EQUAL expression
   80 access: expression . DOT_IDENTIFIER

    ARROW           shift, and go to state 65
    OP_AND          shift, and go to state 66
    OP_OR           shift, and go to state 67
    OP_EQUAL        shift, and go to state 68
    OP_NOT_EQUAL    shift, and go to state 69
    OP_MORE_EQUAL   shift, and go to state 70
    OP_LESS_EQUAL   shift, and go to state 71
    OP_MORE         shift, and go to state 72
    OP_LESS         shift, and go to state 73
    PLUS            shift, and go to state 74
    MINUS           shift, and go to state 75
    ASTERISK        shift, and go to state 76
    SLASH           shift, and go to state 77
    DOT_IDENTIFIER  shift, and go to state 78

    $default  reduce using rule 56 (while_start)


State 51

    9 import: IMPORT STRING_LITERAL . EOL

    EOL  shift, and go to state 88


State 52

    0 $accept: program "end of file" .

    $default  accept


State 53

    4 lines: lines line .

    $default  reduce using rule 4 (lines)


State 54

    6 line: line_content "end of file" .

    $default  reduce using rule 6 (line)


State 55

    5 line: line_content EOL .

    $default  reduce using rule 5 (line)


State 56

   40 arguments: LEFT_PARENTHESIS . definition_arguments RIGHT_PARENTHESIS
   41          | LEFT_PARENTHESIS . RIGHT_PARENTHESIS
   42 definition_arguments: . IDENTIFIER
   43                     | . definition_arguments COMMA IDENTIFIER
   44                     | . %empty  [COMMA, RIGHT_PARENTHESIS]

    IDENTIFIER         shift, and go to state 89
    RIGHT_PARENTHESIS  shift, and go to state 90

    RIGHT_PARENTHESIS  [reduce using rule 44 (definition_arguments)]
    $default           reduce using rule 44 (definition_arguments)

    definition_arguments  go to state 91


State 57

   16 function_definition: function_start arguments . EOL block return_value EOL
   17                    | function_start arguments . EOL return_value EOL

    EOL  shift, and go to state 92


State 58

   19 class_definition: class_start arguments . EOL members_definition methods
   20                 | class_start arguments . EOL members_definition
   21                 | class_start arguments . EOL methods

    EOL  shift, and go to state 93


State 59

   23 c_type_definition: c_type_start EOL . C_members_definition
   31 C_members_definition: . MEMBER_IDENTIFIER EQUAL C_type_identifier EOL
   32                     | . C_members_definition MEMBER_IDENTIFIER EQUAL C_type_identifier EOL

    MEMBER_IDENTIFIER  shift, and go to state 94

    C_members_definition  go to state 95


State 60

   45 globals_definition: global_start EOL . LEFT_PARENTHESIS EOL globals_variables EOL RIGHT_PARENTHESIS EOL

    LEFT_PARENTHESIS  shift, and go to state 96


State 61

   57 expression: if_start expression . EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   62           | expression . ARROW expression
   63           | expression . PLUS expression
   64           | expression . MINUS expression
   65           | expression . ASTERISK expression
   66           | expression . SLASH expression
   67           | expression . OP_AND expression
   68           | expression . OP_OR expression
   69           | expression . OP_MORE_EQUAL expression
   70           | expression . OP_LESS_EQUAL expression
   71           | expression . OP_MORE expression
   72           | expression . OP_LESS expression
   73           | expression . OP_NOT_EQUAL expression
   74           | expression . OP_EQUAL expression
   80 access: expression . DOT_IDENTIFIER

    ARROW           shift, and go to state 65
    OP_AND          shift, and go to state 66
    OP_OR           shift, and go to state 67
    OP_EQUAL        shift, and go to state 68
    OP_NOT_EQUAL    shift, and go to state 69
    OP_MORE_EQUAL   shift, and go to state 70
    OP_LESS_EQUAL   shift, and go to state 71
    OP_MORE         shift, and go to state 72
    OP_LESS         shift, and go to state 73
    PLUS            shift, and go to state 74
    MINUS           shift, and go to state 75
    ASTERISK        shift, and go to state 76
    SLASH           shift, and go to state 77
    DOT_IDENTIFIER  shift, and go to state 78
    EOL             shift, and go to state 97


State 62

   58 expression: else_start EOL . LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS

    LEFT_PARENTHESIS  shift, and go to state 98


State 63

   59 expression: for_start EOL . LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS

    LEFT_PARENTHESIS  shift, and go to state 99


State 64

   60 expression: while_start EOL . LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS

    LEFT_PARENTHESIS  shift, and go to state 100


State 65

   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 while_start: . WHILE expression
   57 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   60           | . while_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   61           | . assign_variable
   62           | . expression ARROW expression
   62           | expression ARROW . expression
   63           | . expression PLUS expression
   64           | . expression MINUS expression
   65           | . expression ASTERISK expression
   66           | . expression SLASH expression
   67           | . expression OP_AND expression
   68           | . expression OP_OR expression
   69           | . expression OP_MORE_EQUAL expression
   70           | . expression OP_LESS_EQUAL expression
   71           | . expression OP_MORE expression
   72           | . expression OP_LESS expression
   73           | . expression OP_NOT_EQUAL expression
   74           | . expression OP_EQUAL expression
   75           | . monomial
   76           | . list
   77           | . access
   78 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   79     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   80 access: . expression DOT_IDENTIFIER
   81 assign_variable: . IDENTIFIER EQUAL expression
   82                | . access EQUAL expression
   83 monomial: . call
   84         | . STRING_LITERAL
   85         | . FLOAT_LITERAL
   86         | . INT_LITERAL
   87         | . variable
   88 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   91     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   92 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    WHILE             shift, and go to state 10
    STRING_LITERAL    shift, and go to state 13
    INT_LITERAL       shift, and go to state 14
    FLOAT_LITERAL     shift, and go to state 15

    if_start         go to state 32
    else_start       go to state 33
    for_start        go to state 34
    while_start      go to state 35
    expression       go to state 101
    list             go to state 37
    access           go to state 38
    assign_variable  go to state 39
    monomial         go to state 40
    call             go to state 41
    variable         go to state 42


State 66

   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 while_start: . WHILE expression
   57 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   60           | . while_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   61           | . assign_variable
   62           | . expression ARROW expression
   63           | . expression PLUS expression
   64           | . expression MINUS expression
   65           | . expression ASTERISK expression
   66           | . expression SLASH expression
   67           | . expression OP_AND expression
   67           | expression OP_AND . expression
   68           | . expression OP_OR expression
   69           | . expression OP_MORE_EQUAL expression
   70           | . expression OP_LESS_EQUAL expression
   71           | . expression OP_MORE expression
   72           | . expression OP_LESS expression
   73           | . expression OP_NOT_EQUAL expression
   74           | . expression OP_EQUAL expression
   75           | . monomial
   76           | . list
   77           | . access
   78 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   79     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   80 access: . expression DOT_IDENTIFIER
   81 assign_variable: . IDENTIFIER EQUAL expression
   82                | . access EQUAL expression
   83 monomial: . call
   84         | . STRING_LITERAL
   85         | . FLOAT_LITERAL
   86         | . INT_LITERAL
   87         | . variable
   88 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   91     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   92 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    WHILE             shift, and go to state 10
    STRING_LITERAL    shift, and go to state 13
    INT_LITERAL       shift, and go to state 14
    FLOAT_LITERAL     shift, and go to state 15

    if_start         go to state 32
    else_start       go to state 33
    for_start        go to state 34
    while_start      go to state 35
    expression       go to state 102
    list             go to state 37
    access           go to state 38
    assign_variable  go to state 39
    monomial         go to state 40
    call             go to state 41
    variable         go to state 42


State 67

   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 while_start: . WHILE expression
   57 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   60           | . while_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   61           | . assign_variable
   62           | . expression ARROW expression
   63           | . expression PLUS expression
   64           | . expression MINUS expression
   65           | . expression ASTERISK expression
   66           | . expression SLASH expression
   67           | . expression OP_AND expression
   68           | . expression OP_OR expression
   68           | expression OP_OR . expression
   69           | . expression OP_MORE_EQUAL expression
   70           | . expression OP_LESS_EQUAL expression
   71           | . expression OP_MORE expression
   72           | . expression OP_LESS expression
   73           | . expression OP_NOT_EQUAL expression
   74           | . expression OP_EQUAL expression
   75           | . monomial
   76           | . list
   77           | . access
   78 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   79     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   80 access: . expression DOT_IDENTIFIER
   81 assign_variable: . IDENTIFIER EQUAL expression
   82                | . access EQUAL expression
   83 monomial: . call
   84         | . STRING_LITERAL
   85         | . FLOAT_LITERAL
   86         | . INT_LITERAL
   87         | . variable
   88 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   91     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   92 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    WHILE             shift, and go to state 10
    STRING_LITERAL    shift, and go to state 13
    INT_LITERAL       shift, and go to state 14
    FLOAT_LITERAL     shift, and go to state 15

    if_start         go to state 32
    else_start       go to state 33
    for_start        go to state 34
    while_start      go to state 35
    expression       go to state 103
    list             go to state 37
    access           go to state 38
    assign_variable  go to state 39
    monomial         go to state 40
    call             go to state 41
    variable         go to state 42


State 68

   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 while_start: . WHILE expression
   57 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   60           | . while_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   61           | . assign_variable
   62           | . expression ARROW expression
   63           | . expression PLUS expression
   64           | . expression MINUS expression
   65           | . expression ASTERISK expression
   66           | . expression SLASH expression
   67           | . expression OP_AND expression
   68           | . expression OP_OR expression
   69           | . expression OP_MORE_EQUAL expression
   70           | . expression OP_LESS_EQUAL expression
   71           | . expression OP_MORE expression
   72           | . expression OP_LESS expression
   73           | . expression OP_NOT_EQUAL expression
   74           | . expression OP_EQUAL expression
   74           | expression OP_EQUAL . expression
   75           | . monomial
   76           | . list
   77           | . access
   78 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   79     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   80 access: . expression DOT_IDENTIFIER
   81 assign_variable: . IDENTIFIER EQUAL expression
   82                | . access EQUAL expression
   83 monomial: . call
   84         | . STRING_LITERAL
   85         | . FLOAT_LITERAL
   86         | . INT_LITERAL
   87         | . variable
   88 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   91     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   92 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    WHILE             shift, and go to state 10
    STRING_LITERAL    shift, and go to state 13
    INT_LITERAL       shift, and go to state 14
    FLOAT_LITERAL     shift, and go to state 15

    if_start         go to state 32
    else_start       go to state 33
    for_start        go to state 34
    while_start      go to state 35
    expression       go to state 104
    list             go to state 37
    access           go to state 38
    assign_variable  go to state 39
    monomial         go to state 40
    call             go to state 41
    variable         go to state 42


State 69

   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 while_start: . WHILE expression
   57 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   60           | . while_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   61           | . assign_variable
   62           | . expression ARROW expression
   63           | . expression PLUS expression
   64           | . expression MINUS expression
   65           | . expression ASTERISK expression
   66           | . expression SLASH expression
   67           | . expression OP_AND expression
   68           | . expression OP_OR expression
   69           | . expression OP_MORE_EQUAL expression
   70           | . expression OP_LESS_EQUAL expression
   71           | . expression OP_MORE expression
   72           | . expression OP_LESS expression
   73           | . expression OP_NOT_EQUAL expression
   73           | expression OP_NOT_EQUAL . expression
   74           | . expression OP_EQUAL expression
   75           | . monomial
   76           | . list
   77           | . access
   78 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   79     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   80 access: . expression DOT_IDENTIFIER
   81 assign_variable: . IDENTIFIER EQUAL expression
   82                | . access EQUAL expression
   83 monomial: . call
   84         | . STRING_LITERAL
   85         | . FLOAT_LITERAL
   86         | . INT_LITERAL
   87         | . variable
   88 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   91     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   92 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    WHILE             shift, and go to state 10
    STRING_LITERAL    shift, and go to state 13
    INT_LITERAL       shift, and go to state 14
    FLOAT_LITERAL     shift, and go to state 15

    if_start         go to state 32
    else_start       go to state 33
    for_start        go to state 34
    while_start      go to state 35
    expression       go to state 105
    list             go to state 37
    access           go to state 38
    assign_variable  go to state 39
    monomial         go to state 40
    call             go to state 41
    variable         go to state 42


State 70

   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 while_start: . WHILE expression
   57 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   60           | . while_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   61           | . assign_variable
   62           | . expression ARROW expression
   63           | . expression PLUS expression
   64           | . expression MINUS expression
   65           | . expression ASTERISK expression
   66           | . expression SLASH expression
   67           | . expression OP_AND expression
   68           | . expression OP_OR expression
   69           | . expression OP_MORE_EQUAL expression
   69           | expression OP_MORE_EQUAL . expression
   70           | . expression OP_LESS_EQUAL expression
   71           | . expression OP_MORE expression
   72           | . expression OP_LESS expression
   73           | . expression OP_NOT_EQUAL expression
   74           | . expression OP_EQUAL expression
   75           | . monomial
   76           | . list
   77           | . access
   78 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   79     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   80 access: . expression DOT_IDENTIFIER
   81 assign_variable: . IDENTIFIER EQUAL expression
   82                | . access EQUAL expression
   83 monomial: . call
   84         | . STRING_LITERAL
   85         | . FLOAT_LITERAL
   86         | . INT_LITERAL
   87         | . variable
   88 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   91     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   92 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    WHILE             shift, and go to state 10
    STRING_LITERAL    shift, and go to state 13
    INT_LITERAL       shift, and go to state 14
    FLOAT_LITERAL     shift, and go to state 15

    if_start         go to state 32
    else_start       go to state 33
    for_start        go to state 34
    while_start      go to state 35
    expression       go to state 106
    list             go to state 37
    access           go to state 38
    assign_variable  go to state 39
    monomial         go to state 40
    call             go to state 41
    variable         go to state 42


State 71

   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 while_start: . WHILE expression
   57 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   60           | . while_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   61           | . assign_variable
   62           | . expression ARROW expression
   63           | . expression PLUS expression
   64           | . expression MINUS expression
   65           | . expression ASTERISK expression
   66           | . expression SLASH expression
   67           | . expression OP_AND expression
   68           | . expression OP_OR expression
   69           | . expression OP_MORE_EQUAL expression
   70           | . expression OP_LESS_EQUAL expression
   70           | expression OP_LESS_EQUAL . expression
   71           | . expression OP_MORE expression
   72           | . expression OP_LESS expression
   73           | . expression OP_NOT_EQUAL expression
   74           | . expression OP_EQUAL expression
   75           | . monomial
   76           | . list
   77           | . access
   78 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   79     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   80 access: . expression DOT_IDENTIFIER
   81 assign_variable: . IDENTIFIER EQUAL expression
   82                | . access EQUAL expression
   83 monomial: . call
   84         | . STRING_LITERAL
   85         | . FLOAT_LITERAL
   86         | . INT_LITERAL
   87         | . variable
   88 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   91     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   92 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    WHILE             shift, and go to state 10
    STRING_LITERAL    shift, and go to state 13
    INT_LITERAL       shift, and go to state 14
    FLOAT_LITERAL     shift, and go to state 15

    if_start         go to state 32
    else_start       go to state 33
    for_start        go to state 34
    while_start      go to state 35
    expression       go to state 107
    list             go to state 37
    access           go to state 38
    assign_variable  go to state 39
    monomial         go to state 40
    call             go to state 41
    variable         go to state 42


State 72

   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 while_start: . WHILE expression
   57 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   60           | . while_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   61           | . assign_variable
   62           | . expression ARROW expression
   63           | . expression PLUS expression
   64           | . expression MINUS expression
   65           | . expression ASTERISK expression
   66           | . expression SLASH expression
   67           | . expression OP_AND expression
   68           | . expression OP_OR expression
   69           | . expression OP_MORE_EQUAL expression
   70           | . expression OP_LESS_EQUAL expression
   71           | . expression OP_MORE expression
   71           | expression OP_MORE . expression
   72           | . expression OP_LESS expression
   73           | . expression OP_NOT_EQUAL expression
   74           | . expression OP_EQUAL expression
   75           | . monomial
   76           | . list
   77           | . access
   78 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   79     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   80 access: . expression DOT_IDENTIFIER
   81 assign_variable: . IDENTIFIER EQUAL expression
   82                | . access EQUAL expression
   83 monomial: . call
   84         | . STRING_LITERAL
   85         | . FLOAT_LITERAL
   86         | . INT_LITERAL
   87         | . variable
   88 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   91     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   92 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    WHILE             shift, and go to state 10
    STRING_LITERAL    shift, and go to state 13
    INT_LITERAL       shift, and go to state 14
    FLOAT_LITERAL     shift, and go to state 15

    if_start         go to state 32
    else_start       go to state 33
    for_start        go to state 34
    while_start      go to state 35
    expression       go to state 108
    list             go to state 37
    access           go to state 38
    assign_variable  go to state 39
    monomial         go to state 40
    call             go to state 41
    variable         go to state 42


State 73

   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 while_start: . WHILE expression
   57 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   60           | . while_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   61           | . assign_variable
   62           | . expression ARROW expression
   63           | . expression PLUS expression
   64           | . expression MINUS expression
   65           | . expression ASTERISK expression
   66           | . expression SLASH expression
   67           | . expression OP_AND expression
   68           | . expression OP_OR expression
   69           | . expression OP_MORE_EQUAL expression
   70           | . expression OP_LESS_EQUAL expression
   71           | . expression OP_MORE expression
   72           | . expression OP_LESS expression
   72           | expression OP_LESS . expression
   73           | . expression OP_NOT_EQUAL expression
   74           | . expression OP_EQUAL expression
   75           | . monomial
   76           | . list
   77           | . access
   78 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   79     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   80 access: . expression DOT_IDENTIFIER
   81 assign_variable: . IDENTIFIER EQUAL expression
   82                | . access EQUAL expression
   83 monomial: . call
   84         | . STRING_LITERAL
   85         | . FLOAT_LITERAL
   86         | . INT_LITERAL
   87         | . variable
   88 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   91     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   92 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    WHILE             shift, and go to state 10
    STRING_LITERAL    shift, and go to state 13
    INT_LITERAL       shift, and go to state 14
    FLOAT_LITERAL     shift, and go to state 15

    if_start         go to state 32
    else_start       go to state 33
    for_start        go to state 34
    while_start      go to state 35
    expression       go to state 109
    list             go to state 37
    access           go to state 38
    assign_variable  go to state 39
    monomial         go to state 40
    call             go to state 41
    variable         go to state 42


State 74

   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 while_start: . WHILE expression
   57 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   60           | . while_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   61           | . assign_variable
   62           | . expression ARROW expression
   63           | . expression PLUS expression
   63           | expression PLUS . expression
   64           | . expression MINUS expression
   65           | . expression ASTERISK expression
   66           | . expression SLASH expression
   67           | . expression OP_AND expression
   68           | . expression OP_OR expression
   69           | . expression OP_MORE_EQUAL expression
   70           | . expression OP_LESS_EQUAL expression
   71           | . expression OP_MORE expression
   72           | . expression OP_LESS expression
   73           | . expression OP_NOT_EQUAL expression
   74           | . expression OP_EQUAL expression
   75           | . monomial
   76           | . list
   77           | . access
   78 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   79     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   80 access: . expression DOT_IDENTIFIER
   81 assign_variable: . IDENTIFIER EQUAL expression
   82                | . access EQUAL expression
   83 monomial: . call
   84         | . STRING_LITERAL
   85         | . FLOAT_LITERAL
   86         | . INT_LITERAL
   87         | . variable
   88 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   91     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   92 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    WHILE             shift, and go to state 10
    STRING_LITERAL    shift, and go to state 13
    INT_LITERAL       shift, and go to state 14
    FLOAT_LITERAL     shift, and go to state 15

    if_start         go to state 32
    else_start       go to state 33
    for_start        go to state 34
    while_start      go to state 35
    expression       go to state 110
    list             go to state 37
    access           go to state 38
    assign_variable  go to state 39
    monomial         go to state 40
    call             go to state 41
    variable         go to state 42


State 75

   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 while_start: . WHILE expression
   57 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   60           | . while_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   61           | . assign_variable
   62           | . expression ARROW expression
   63           | . expression PLUS expression
   64           | . expression MINUS expression
   64           | expression MINUS . expression
   65           | . expression ASTERISK expression
   66           | . expression SLASH expression
   67           | . expression OP_AND expression
   68           | . expression OP_OR expression
   69           | . expression OP_MORE_EQUAL expression
   70           | . expression OP_LESS_EQUAL expression
   71           | . expression OP_MORE expression
   72           | . expression OP_LESS expression
   73           | . expression OP_NOT_EQUAL expression
   74           | . expression OP_EQUAL expression
   75           | . monomial
   76           | . list
   77           | . access
   78 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   79     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   80 access: . expression DOT_IDENTIFIER
   81 assign_variable: . IDENTIFIER EQUAL expression
   82                | . access EQUAL expression
   83 monomial: . call
   84         | . STRING_LITERAL
   85         | . FLOAT_LITERAL
   86         | . INT_LITERAL
   87         | . variable
   88 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   91     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   92 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    WHILE             shift, and go to state 10
    STRING_LITERAL    shift, and go to state 13
    INT_LITERAL       shift, and go to state 14
    FLOAT_LITERAL     shift, and go to state 15

    if_start         go to state 32
    else_start       go to state 33
    for_start        go to state 34
    while_start      go to state 35
    expression       go to state 111
    list             go to state 37
    access           go to state 38
    assign_variable  go to state 39
    monomial         go to state 40
    call             go to state 41
    variable         go to state 42


State 76

   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 while_start: . WHILE expression
   57 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   60           | . while_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   61           | . assign_variable
   62           | . expression ARROW expression
   63           | . expression PLUS expression
   64           | . expression MINUS expression
   65           | . expression ASTERISK expression
   65           | expression ASTERISK . expression
   66           | . expression SLASH expression
   67           | . expression OP_AND expression
   68           | . expression OP_OR expression
   69           | . expression OP_MORE_EQUAL expression
   70           | . expression OP_LESS_EQUAL expression
   71           | . expression OP_MORE expression
   72           | . expression OP_LESS expression
   73           | . expression OP_NOT_EQUAL expression
   74           | . expression OP_EQUAL expression
   75           | . monomial
   76           | . list
   77           | . access
   78 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   79     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   80 access: . expression DOT_IDENTIFIER
   81 assign_variable: . IDENTIFIER EQUAL expression
   82                | . access EQUAL expression
   83 monomial: . call
   84         | . STRING_LITERAL
   85         | . FLOAT_LITERAL
   86         | . INT_LITERAL
   87         | . variable
   88 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   91     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   92 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    WHILE             shift, and go to state 10
    STRING_LITERAL    shift, and go to state 13
    INT_LITERAL       shift, and go to state 14
    FLOAT_LITERAL     shift, and go to state 15

    if_start         go to state 32
    else_start       go to state 33
    for_start        go to state 34
    while_start      go to state 35
    expression       go to state 112
    list             go to state 37
    access           go to state 38
    assign_variable  go to state 39
    monomial         go to state 40
    call             go to state 41
    variable         go to state 42


State 77

   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 while_start: . WHILE expression
   57 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   60           | . while_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   61           | . assign_variable
   62           | . expression ARROW expression
   63           | . expression PLUS expression
   64           | . expression MINUS expression
   65           | . expression ASTERISK expression
   66           | . expression SLASH expression
   66           | expression SLASH . expression
   67           | . expression OP_AND expression
   68           | . expression OP_OR expression
   69           | . expression OP_MORE_EQUAL expression
   70           | . expression OP_LESS_EQUAL expression
   71           | . expression OP_MORE expression
   72           | . expression OP_LESS expression
   73           | . expression OP_NOT_EQUAL expression
   74           | . expression OP_EQUAL expression
   75           | . monomial
   76           | . list
   77           | . access
   78 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   79     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   80 access: . expression DOT_IDENTIFIER
   81 assign_variable: . IDENTIFIER EQUAL expression
   82                | . access EQUAL expression
   83 monomial: . call
   84         | . STRING_LITERAL
   85         | . FLOAT_LITERAL
   86         | . INT_LITERAL
   87         | . variable
   88 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   91     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   92 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    WHILE             shift, and go to state 10
    STRING_LITERAL    shift, and go to state 13
    INT_LITERAL       shift, and go to state 14
    FLOAT_LITERAL     shift, and go to state 15

    if_start         go to state 32
    else_start       go to state 33
    for_start        go to state 34
    while_start      go to state 35
    expression       go to state 113
    list             go to state 37
    access           go to state 38
    assign_variable  go to state 39
    monomial         go to state 40
    call             go to state 41
    variable         go to state 42


State 78

   80 access: expression DOT_IDENTIFIER .

    $default  reduce using rule 80 (access)


State 79

   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 while_start: . WHILE expression
   57 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   60           | . while_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   61           | . assign_variable
   62           | . expression ARROW expression
   63           | . expression PLUS expression
   64           | . expression MINUS expression
   65           | . expression ASTERISK expression
   66           | . expression SLASH expression
   67           | . expression OP_AND expression
   68           | . expression OP_OR expression
   69           | . expression OP_MORE_EQUAL expression
   70           | . expression OP_LESS_EQUAL expression
   71           | . expression OP_MORE expression
   72           | . expression OP_LESS expression
   73           | . expression OP_NOT_EQUAL expression
   74           | . expression OP_EQUAL expression
   75           | . monomial
   76           | . list
   77           | . access
   78 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   79     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   80 access: . expression DOT_IDENTIFIER
   81 assign_variable: . IDENTIFIER EQUAL expression
   82                | . access EQUAL expression
   82                | access EQUAL . expression
   83 monomial: . call
   84         | . STRING_LITERAL
   85         | . FLOAT_LITERAL
   86         | . INT_LITERAL
   87         | . variable
   88 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   91     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   92 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    WHILE             shift, and go to state 10
    STRING_LITERAL    shift, and go to state 13
    INT_LITERAL       shift, and go to state 14
    FLOAT_LITERAL     shift, and go to state 15

    if_start         go to state 32
    else_start       go to state 33
    for_start        go to state 34
    while_start      go to state 35
    expression       go to state 114
    list             go to state 37
    access           go to state 38
    assign_variable  go to state 39
    monomial         go to state 40
    call             go to state 41
    variable         go to state 42


State 80

   51 expressions: . expression
   52            | . expressions COMMA expression
   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 while_start: . WHILE expression
   57 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   60           | . while_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   61           | . assign_variable
   62           | . expression ARROW expression
   63           | . expression PLUS expression
   64           | . expression MINUS expression
   65           | . expression ASTERISK expression
   66           | . expression SLASH expression
   67           | . expression OP_AND expression
   68           | . expression OP_OR expression
   69           | . expression OP_MORE_EQUAL expression
   70           | . expression OP_LESS_EQUAL expression
   71           | . expression OP_MORE expression
   72           | . expression OP_LESS expression
   73           | . expression OP_NOT_EQUAL expression
   74           | . expression OP_EQUAL expression
   75           | . monomial
   76           | . list
   77           | . access
   78 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   79     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   80 access: . expression DOT_IDENTIFIER
   81 assign_variable: . IDENTIFIER EQUAL expression
   82                | . access EQUAL expression
   83 monomial: . call
   84         | . STRING_LITERAL
   85         | . FLOAT_LITERAL
   86         | . INT_LITERAL
   87         | . variable
   88 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   90     | access LEFT_PARENTHESIS . expressions RIGHT_PARENTHESIS
   91     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   91     | access LEFT_PARENTHESIS . RIGHT_PARENTHESIS
   92 variable: . IDENTIFIER

    IDENTIFIER         shift, and go to state 5
    RIGHT_PARENTHESIS  shift, and go to state 115
    LEFT_CURLY_BRACE   shift, and go to state 6
    IF                 shift, and go to state 7
    ELSE               shift, and go to state 8
    FOR                shift, and go to state 9
    WHILE              shift, and go to state 10
    STRING_LITERAL     shift, and go to state 13
    INT_LITERAL        shift, and go to state 14
    FLOAT_LITERAL      shift, and go to state 15

    expressions      go to state 116
    if_start         go to state 32
    else_start       go to state 33
    for_start        go to state 34
    while_start      go to state 35
    expression       go to state 48
    list             go to state 37
    access           go to state 38
    assign_variable  go to state 39
    monomial         go to state 40
    call             go to state 41
    variable         go to state 42


State 81

   33 C_type_identifier: . IDENTIFIER
   34                  | . C_type_identifier IDENTIFIER
   35 C_arguments: . C_type_identifier
   36            | . C_arguments COMMA C_type_identifier
   49 c_function_declaration: C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT . C_arguments EOL C_FUNCTION_RETURN C_returns EOL
   50                       | C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT . EOL C_FUNCTION_RETURN C_returns EOL

    IDENTIFIER  shift, and go to state 117
    EOL         shift, and go to state 118

    C_type_identifier  go to state 119
    C_arguments        go to state 120


State 82

   62 expression: expression . ARROW expression
   63           | expression . PLUS expression
   64           | expression . MINUS expression
   65           | expression . ASTERISK expression
   66           | expression . SLASH expression
   67           | expression . OP_AND expression
   68           | expression . OP_OR expression
   69           | expression . OP_MORE_EQUAL expression
   70           | expression . OP_LESS_EQUAL expression
   71           | expression . OP_MORE expression
   72           | expression . OP_LESS expression
   73           | expression . OP_NOT_EQUAL expression
   74           | expression . OP_EQUAL expression
   80 access: expression . DOT_IDENTIFIER
   81 assign_variable: IDENTIFIER EQUAL expression .  ["end of file", COMMA, RIGHT_PARENTHESIS, RIGHT_CURLY_BRACE, EOL]

    ARROW           shift, and go to state 65
    OP_AND          shift, and go to state 66
    OP_OR           shift, and go to state 67
    OP_EQUAL        shift, and go to state 68
    OP_NOT_EQUAL    shift, and go to state 69
    OP_MORE_EQUAL   shift, and go to state 70
    OP_LESS_EQUAL   shift, and go to state 71
    OP_MORE         shift, and go to state 72
    OP_LESS         shift, and go to state 73
    PLUS            shift, and go to state 74
    MINUS           shift, and go to state 75
    ASTERISK        shift, and go to state 76
    SLASH           shift, and go to state 77
    DOT_IDENTIFIER  shift, and go to state 78

    $default  reduce using rule 81 (assign_variable)

    Conflict between rule 81 and token ARROW resolved as shift (%right ARROW).
    Conflict between rule 81 and token OP_AND resolved as shift (EQUAL < OP_AND).
    Conflict between rule 81 and token OP_OR resolved as shift (EQUAL < OP_OR).
    Conflict between rule 81 and token OP_EQUAL resolved as shift (EQUAL < OP_EQUAL).
    Conflict between rule 81 and token OP_NOT_EQUAL resolved as shift (EQUAL < OP_NOT_EQUAL).
    Conflict between rule 81 and token OP_MORE_EQUAL resolved as shift (EQUAL < OP_MORE_EQUAL).
    Conflict between rule 81 and token OP_LESS_EQUAL resolved as shift (EQUAL < OP_LESS_EQUAL).
    Conflict between rule 81 and token OP_MORE resolved as shift (EQUAL < OP_MORE).
    Conflict between rule 81 and token OP_LESS resolved as shift (EQUAL < OP_LESS).
    Conflict between rule 81 and token PLUS resolved as shift (EQUAL < PLUS).
    Conflict between rule 81 and token MINUS resolved as shift (EQUAL < MINUS).
    Conflict between rule 81 and token ASTERISK resolved as shift (EQUAL < ASTERISK).
    Conflict between rule 81 and token SLASH resolved as shift (EQUAL < SLASH).
    Conflict between rule 81 and token DOT_IDENTIFIER resolved as shift (EQUAL < DOT_IDENTIFIER).


State 83

   89 call: IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS .

    $default  reduce using rule 89 (call)


State 84

   52 expressions: expressions . COMMA expression
   88 call: IDENTIFIER LEFT_PARENTHESIS expressions . RIGHT_PARENTHESIS

    COMMA              shift, and go to state 85
    RIGHT_PARENTHESIS  shift, and go to state 121


State 85

   52 expressions: expressions COMMA . expression
   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 while_start: . WHILE expression
   57 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   60           | . while_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   61           | . assign_variable
   62           | . expression ARROW expression
   63           | . expression PLUS expression
   64           | . expression MINUS expression
   65           | . expression ASTERISK expression
   66           | . expression SLASH expression
   67           | . expression OP_AND expression
   68           | . expression OP_OR expression
   69           | . expression OP_MORE_EQUAL expression
   70           | . expression OP_LESS_EQUAL expression
   71           | . expression OP_MORE expression
   72           | . expression OP_LESS expression
   73           | . expression OP_NOT_EQUAL expression
   74           | . expression OP_EQUAL expression
   75           | . monomial
   76           | . list
   77           | . access
   78 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   79     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   80 access: . expression DOT_IDENTIFIER
   81 assign_variable: . IDENTIFIER EQUAL expression
   82                | . access EQUAL expression
   83 monomial: . call
   84         | . STRING_LITERAL
   85         | . FLOAT_LITERAL
   86         | . INT_LITERAL
   87         | . variable
   88 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   91     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   92 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    WHILE             shift, and go to state 10
    STRING_LITERAL    shift, and go to state 13
    INT_LITERAL       shift, and go to state 14
    FLOAT_LITERAL     shift, and go to state 15

    if_start         go to state 32
    else_start       go to state 33
    for_start        go to state 34
    while_start      go to state 35
    expression       go to state 122
    list             go to state 37
    access           go to state 38
    assign_variable  go to state 39
    monomial         go to state 40
    call             go to state 41
    variable         go to state 42


State 86

   78 list: LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE .

    $default  reduce using rule 78 (list)


State 87

   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   55          | FOR expression COMMA . expression COMMA expression
   56 while_start: . WHILE expression
   57 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   60           | . while_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   61           | . assign_variable
   62           | . expression ARROW expression
   63           | . expression PLUS expression
   64           | . expression MINUS expression
   65           | . expression ASTERISK expression
   66           | . expression SLASH expression
   67           | . expression OP_AND expression
   68           | . expression OP_OR expression
   69           | . expression OP_MORE_EQUAL expression
   70           | . expression OP_LESS_EQUAL expression
   71           | . expression OP_MORE expression
   72           | . expression OP_LESS expression
   73           | . expression OP_NOT_EQUAL expression
   74           | . expression OP_EQUAL expression
   75           | . monomial
   76           | . list
   77           | . access
   78 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   79     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   80 access: . expression DOT_IDENTIFIER
   81 assign_variable: . IDENTIFIER EQUAL expression
   82                | . access EQUAL expression
   83 monomial: . call
   84         | . STRING_LITERAL
   85         | . FLOAT_LITERAL
   86         | . INT_LITERAL
   87         | . variable
   88 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   91     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   92 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    WHILE             shift, and go to state 10
    STRING_LITERAL    shift, and go to state 13
    INT_LITERAL       shift, and go to state 14
    FLOAT_LITERAL     shift, and go to state 15

    if_start         go to state 32
    else_start       go to state 33
    for_start        go to state 34
    while_start      go to state 35
    expression       go to state 123
    list             go to state 37
    access           go to state 38
    assign_variable  go to state 39
    monomial         go to state 40
    call             go to state 41
    variable         go to state 42


State 88

    9 import: IMPORT STRING_LITERAL EOL .

    $default  reduce using rule 9 (import)


State 89

   42 definition_arguments: IDENTIFIER .

    $default  reduce using rule 42 (definition_arguments)


State 90

   41 arguments: LEFT_PARENTHESIS RIGHT_PARENTHESIS .

    $default  reduce using rule 41 (arguments)


State 91

   40 arguments: LEFT_PARENTHESIS definition_arguments . RIGHT_PARENTHESIS
   43 definition_arguments: definition_arguments . COMMA IDENTIFIER

    COMMA              shift, and go to state 124
    RIGHT_PARENTHESIS  shift, and go to state 125


State 92

    2 block: . lines
    3 lines: . line
    4      | . lines line
    5 line: . line_content EOL
    6     | . line_content "end of file"
    7     | . definition
    8     | . import
    9 import: . IMPORT STRING_LITERAL EOL
   10 line_content: . expression
   11 definition: . function_definition
   12           | . class_definition
   13           | . c_type_definition
   14           | . globals_definition
   15           | . c_function_declaration
   16 function_definition: . function_start arguments EOL block return_value EOL
   16                    | function_start arguments EOL . block return_value EOL
   17                    | . function_start arguments EOL return_value EOL
   17                    | function_start arguments EOL . return_value EOL
   18 function_start: . FUNCTION_DEFINITION
   19 class_definition: . class_start arguments EOL members_definition methods
   20                 | . class_start arguments EOL members_definition
   21                 | . class_start arguments EOL methods
   22 class_start: . CLASS_DEFINITION
   23 c_type_definition: . c_type_start EOL C_members_definition
   24 c_type_start: . C_TYPE_DEFINITION
   38 return_value: . RETURN expression
   39             | . RETURN
   45 globals_definition: . global_start EOL LEFT_PARENTHESIS EOL globals_variables EOL RIGHT_PARENTHESIS EOL
   46 global_start: . GLOBAL
   49 c_function_declaration: . C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT C_arguments EOL C_FUNCTION_RETURN C_returns EOL
   50                       | . C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT EOL C_FUNCTION_RETURN C_returns EOL
   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 while_start: . WHILE expression
   57 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   60           | . while_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   61           | . assign_variable
   62           | . expression ARROW expression
   63           | . expression PLUS expression
   64           | . expression MINUS expression
   65           | . expression ASTERISK expression
   66           | . expression SLASH expression
   67           | . expression OP_AND expression
   68           | . expression OP_OR expression
   69           | . expression OP_MORE_EQUAL expression
   70           | . expression OP_LESS_EQUAL expression
   71           | . expression OP_MORE expression
   72           | . expression OP_LESS expression
   73           | . expression OP_NOT_EQUAL expression
   74           | . expression OP_EQUAL expression
   75           | . monomial
   76           | . list
   77           | . access
   78 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   79     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   80 access: . expression DOT_IDENTIFIER
   81 assign_variable: . IDENTIFIER EQUAL expression
   82                | . access EQUAL expression
   83 monomial: . call
   84         | . STRING_LITERAL
   85         | . FLOAT_LITERAL
   86         | . INT_LITERAL
   87         | . variable
   88 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   91     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   92 variable: . IDENTIFIER

    FUNCTION_DEFINITION     shift, and go to state 1
    CLASS_DEFINITION        shift, and go to state 2
    C_TYPE_DEFINITION       shift, and go to state 3
    C_FUNCTION_DECLARATION  shift, and go to state 4
    RETURN                  shift, and go to state 126
    IDENTIFIER              shift, and go to state 5
    LEFT_CURLY_BRACE        shift, and go to state 6
    IF                      shift, and go to state 7
    ELSE                    shift, and go to state 8
    FOR                     shift, and go to state 9
    WHILE                   shift, and go to state 10
    GLOBAL                  shift, and go to state 11
    IMPORT                  shift, and go to state 12
    STRING_LITERAL          shift, and go to state 13
    INT_LITERAL             shift, and go to state 14
    FLOAT_LITERAL           shift, and go to state 15

    block                   go to state 127
    lines                   go to state 18
    line                    go to state 19
    import                  go to state 20
    line_content            go to state 21
    definition              go to state 22
    function_definition     go to state 23
    function_start          go to state 24
    class_definition        go to state 25
    class_start             go to state 26
    c_type_definition       go to state 27
    c_type_start            go to state 28
    return_value            go to state 128
    globals_definition      go to state 29
    global_start            go to state 30
    c_function_declaration  go to state 31
    if_start                go to state 32
    else_start              go to state 33
    for_start               go to state 34
    while_start             go to state 35
    expression              go to state 36
    list                    go to state 37
    access                  go to state 38
    assign_variable         go to state 39
    monomial                go to state 40
    call                    go to state 41
    variable                go to state 42


State 93

   19 class_definition: class_start arguments EOL . members_definition methods
   20                 | class_start arguments EOL . members_definition
   21                 | class_start arguments EOL . methods
   25 methods: . method_definition EOL
   26        | . methods method_definition EOL
   27 method_definition: . METHOD_DEFINITION arguments EOL block return_value
   28 members_definition: . MEMBER_IDENTIFIER EQUAL expression EOL
   29                   | . members_definition MEMBER_IDENTIFIER EQUAL expression EOL
   30                   | . EOL

    METHOD_DEFINITION  shift, and go to state 129
    MEMBER_IDENTIFIER  shift, and go to state 130
    EOL                shift, and go to state 131

    methods             go to state 132
    method_definition   go to state 133
    members_definition  go to state 134


State 94

   31 C_members_definition: MEMBER_IDENTIFIER . EQUAL C_type_identifier EOL

    EQUAL  shift, and go to state 135


State 95

   23 c_type_definition: c_type_start EOL C_members_definition .  ["end of file", FUNCTION_DEFINITION, CLASS_DEFINITION, C_TYPE_DEFINITION, C_FUNCTION_DECLARATION, RETURN, IDENTIFIER, RIGHT_PARENTHESIS, LEFT_CURLY_BRACE, IF, ELSE, FOR, WHILE, GLOBAL, IMPORT, STRING_LITERAL, INT_LITERAL, FLOAT_LITERAL]
   32 C_members_definition: C_members_definition . MEMBER_IDENTIFIER EQUAL C_type_identifier EOL

    MEMBER_IDENTIFIER  shift, and go to state 136

    $default  reduce using rule 23 (c_type_definition)


State 96

   45 globals_definition: global_start EOL LEFT_PARENTHESIS . EOL globals_variables EOL RIGHT_PARENTHESIS EOL

    EOL  shift, and go to state 137


State 97

   57 expression: if_start expression EOL . LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS

    LEFT_PARENTHESIS  shift, and go to state 138


State 98

   58 expression: else_start EOL LEFT_PARENTHESIS . EOL block RIGHT_PARENTHESIS

    EOL  shift, and go to state 139


State 99

   59 expression: for_start EOL LEFT_PARENTHESIS . EOL block RIGHT_PARENTHESIS

    EOL  shift, and go to state 140


State 100

   60 expression: while_start EOL LEFT_PARENTHESIS . EOL block RIGHT_PARENTHESIS

    EOL  shift, and go to state 141


State 101

   62 expression: expression . ARROW expression
   62           | expression ARROW expression .  ["end of file", COMMA, RIGHT_PARENTHESIS, RIGHT_CURLY_BRACE, EOL]
   63           | expression . PLUS expression
   64           | expression . MINUS expression
   65           | expression . ASTERISK expression
   66           | expression . SLASH expression
   67           | expression . OP_AND expression
   68           | expression . OP_OR expression
   69           | expression . OP_MORE_EQUAL expression
   70           | expression . OP_LESS_EQUAL expression
   71           | expression . OP_MORE expression
   72           | expression . OP_LESS expression
   73           | expression . OP_NOT_EQUAL expression
   74           | expression . OP_EQUAL expression
   80 access: expression . DOT_IDENTIFIER

    ARROW           shift, and go to state 65
    OP_AND          shift, and go to state 66
    OP_OR           shift, and go to state 67
    OP_EQUAL        shift, and go to state 68
    OP_NOT_EQUAL    shift, and go to state 69
    OP_MORE_EQUAL   shift, and go to state 70
    OP_LESS_EQUAL   shift, and go to state 71
    OP_MORE         shift, and go to state 72
    OP_LESS         shift, and go to state 73
    PLUS            shift, and go to state 74
    MINUS           shift, and go to state 75
    ASTERISK        shift, and go to state 76
    SLASH           shift, and go to state 77
    DOT_IDENTIFIER  shift, and go to state 78

    $default  reduce using rule 62 (expression)

    Conflict between rule 62 and token ARROW resolved as shift (%right ARROW).
    Conflict between rule 62 and token OP_AND resolved as shift (ARROW < OP_AND).
    Conflict between rule 62 and token OP_OR resolved as shift (ARROW < OP_OR).
    Conflict between rule 62 and token OP_EQUAL resolved as shift (ARROW < OP_EQUAL).
    Conflict between rule 62 and token OP_NOT_EQUAL resolved as shift (ARROW < OP_NOT_EQUAL).
    Conflict between rule 62 and token OP_MORE_EQUAL resolved as shift (ARROW < OP_MORE_EQUAL).
    Conflict between rule 62 and token OP_LESS_EQUAL resolved as shift (ARROW < OP_LESS_EQUAL).
    Conflict between rule 62 and token OP_MORE resolved as shift (ARROW < OP_MORE).
    Conflict between rule 62 and token OP_LESS resolved as shift (ARROW < OP_LESS).
    Conflict between rule 62 and token PLUS resolved as shift (ARROW < PLUS).
    Conflict between rule 62 and token MINUS resolved as shift (ARROW < MINUS).
    Conflict between rule 62 and token ASTERISK resolved as shift (ARROW < ASTERISK).
    Conflict between rule 62 and token SLASH resolved as shift (ARROW < SLASH).
    Conflict between rule 62 and token DOT_IDENTIFIER resolved as shift (ARROW < DOT_IDENTIFIER).


State 102

   62 expression: expression . ARROW expression
   63           | expression . PLUS expression
   64           | expression . MINUS expression
   65           | expression . ASTERISK expression
   66           | expression . SLASH expression
   67           | expression . OP_AND expression
   67           | expression OP_AND expression .  ["end of file", ARROW, OP_AND, OP_OR, COMMA, RIGHT_PARENTHESIS, RIGHT_CURLY_BRACE, EOL]
   68           | expression . OP_OR expression
   69           | expression . OP_MORE_EQUAL expression
   70           | expression . OP_LESS_EQUAL expression
   71           | expression . OP_MORE expression
   72           | expression . OP_LESS expression
   73           | expression . OP_NOT_EQUAL expression
   74           | expression . OP_EQUAL expression
   80 access: expression . DOT_IDENTIFIER

    OP_EQUAL        shift, and go to state 68
    OP_NOT_EQUAL    shift, and go to state 69
    OP_MORE_EQUAL   shift, and go to state 70
    OP_LESS_EQUAL   shift, and go to state 71
    OP_MORE         shift, and go to state 72
    OP_LESS         shift, and go to state 73
    PLUS            shift, and go to state 74
    MINUS           shift, and go to state 75
    ASTERISK        shift, and go to state 76
    SLASH           shift, and go to state 77
    DOT_IDENTIFIER  shift, and go to state 78

    $default  reduce using rule 67 (expression)

    Conflict between rule 67 and token ARROW resolved as reduce (ARROW < OP_AND).
    Conflict between rule 67 and token OP_AND resolved as reduce (%left OP_AND).
    Conflict between rule 67 and token OP_OR resolved as reduce (%left OP_OR).
    Conflict between rule 67 and token OP_EQUAL resolved as shift (OP_AND < OP_EQUAL).
    Conflict between rule 67 and token OP_NOT_EQUAL resolved as shift (OP_AND < OP_NOT_EQUAL).
    Conflict between rule 67 and token OP_MORE_EQUAL resolved as shift (OP_AND < OP_MORE_EQUAL).
    Conflict between rule 67 and token OP_LESS_EQUAL resolved as shift (OP_AND < OP_LESS_EQUAL).
    Conflict between rule 67 and token OP_MORE resolved as shift (OP_AND < OP_MORE).
    Conflict between rule 67 and token OP_LESS resolved as shift (OP_AND < OP_LESS).
    Conflict between rule 67 and token PLUS resolved as shift (OP_AND < PLUS).
    Conflict between rule 67 and token MINUS resolved as shift (OP_AND < MINUS).
    Conflict between rule 67 and token ASTERISK resolved as shift (OP_AND < ASTERISK).
    Conflict between rule 67 and token SLASH resolved as shift (OP_AND < SLASH).
    Conflict between rule 67 and token DOT_IDENTIFIER resolved as shift (OP_AND < DOT_IDENTIFIER).


State 103

   62 expression: expression . ARROW expression
   63           | expression . PLUS expression
   64           | expression . MINUS expression
   65           | expression . ASTERISK expression
   66           | expression . SLASH expression
   67           | expression . OP_AND expression
   68           | expression . OP_OR expression
   68           | expression OP_OR expression .  ["end of file", ARROW, OP_AND, OP_OR, COMMA, RIGHT_PARENTHESIS, RIGHT_CURLY_BRACE, EOL]
   69           | expression . OP_MORE_EQUAL expression
   70           | expression . OP_LESS_EQUAL expression
   71           | expression . OP_MORE expression
   72           | expression . OP_LESS expression
   73           | expression . OP_NOT_EQUAL expression
   74           | expression . OP_EQUAL expression
   80 access: expression . DOT_IDENTIFIER

    OP_EQUAL        shift, and go to state 68
    OP_NOT_EQUAL    shift, and go to state 69
    OP_MORE_EQUAL   shift, and go to state 70
    OP_LESS_EQUAL   shift, and go to state 71
    OP_MORE         shift, and go to state 72
    OP_LESS         shift, and go to state 73
    PLUS            shift, and go to state 74
    MINUS           shift, and go to state 75
    ASTERISK        shift, and go to state 76
    SLASH           shift, and go to state 77
    DOT_IDENTIFIER  shift, and go to state 78

    $default  reduce using rule 68 (expression)

    Conflict between rule 68 and token ARROW resolved as reduce (ARROW < OP_OR).
    Conflict between rule 68 and token OP_AND resolved as reduce (%left OP_AND).
    Conflict between rule 68 and token OP_OR resolved as reduce (%left OP_OR).
    Conflict between rule 68 and token OP_EQUAL resolved as shift (OP_OR < OP_EQUAL).
    Conflict between rule 68 and token OP_NOT_EQUAL resolved as shift (OP_OR < OP_NOT_EQUAL).
    Conflict between rule 68 and token OP_MORE_EQUAL resolved as shift (OP_OR < OP_MORE_EQUAL).
    Conflict between rule 68 and token OP_LESS_EQUAL resolved as shift (OP_OR < OP_LESS_EQUAL).
    Conflict between rule 68 and token OP_MORE resolved as shift (OP_OR < OP_MORE).
    Conflict between rule 68 and token OP_LESS resolved as shift (OP_OR < OP_LESS).
    Conflict between rule 68 and token PLUS resolved as shift (OP_OR < PLUS).
    Conflict between rule 68 and token MINUS resolved as shift (OP_OR < MINUS).
    Conflict between rule 68 and token ASTERISK resolved as shift (OP_OR < ASTERISK).
    Conflict between rule 68 and token SLASH resolved as shift (OP_OR < SLASH).
    Conflict between rule 68 and token DOT_IDENTIFIER resolved as shift (OP_OR < DOT_IDENTIFIER).


State 104

   62 expression: expression . ARROW expression
   63           | expression . PLUS expression
   64           | expression . MINUS expression
   65           | expression . ASTERISK expression
   66           | expression . SLASH expression
   67           | expression . OP_AND expression
   68           | expression . OP_OR expression
   69           | expression . OP_MORE_EQUAL expression
   70           | expression . OP_LESS_EQUAL expression
   71           | expression . OP_MORE expression
   72           | expression . OP_LESS expression
   73           | expression . OP_NOT_EQUAL expression
   74           | expression . OP_EQUAL expression
   74           | expression OP_EQUAL expression .  ["end of file", ARROW, OP_AND, OP_OR, OP_EQUAL, OP_NOT_EQUAL, OP_MORE_EQUAL, OP_LESS_EQUAL, OP_MORE, OP_LESS, COMMA, RIGHT_PARENTHESIS, RIGHT_CURLY_BRACE, EOL]
   80 access: expression . DOT_IDENTIFIER

    PLUS            shift, and go to state 74
    MINUS           shift, and go to state 75
    ASTERISK        shift, and go to state 76
    SLASH           shift, and go to state 77
    DOT_IDENTIFIER  shift, and go to state 78

    $default  reduce using rule 74 (expression)

    Conflict between rule 74 and token ARROW resolved as reduce (ARROW < OP_EQUAL).
    Conflict between rule 74 and token OP_AND resolved as reduce (OP_AND < OP_EQUAL).
    Conflict between rule 74 and token OP_OR resolved as reduce (OP_OR < OP_EQUAL).
    Conflict between rule 74 and token OP_EQUAL resolved as reduce (%left OP_EQUAL).
    Conflict between rule 74 and token OP_NOT_EQUAL resolved as reduce (%left OP_NOT_EQUAL).
    Conflict between rule 74 and token OP_MORE_EQUAL resolved as reduce (%left OP_MORE_EQUAL).
    Conflict between rule 74 and token OP_LESS_EQUAL resolved as reduce (%left OP_LESS_EQUAL).
    Conflict between rule 74 and token OP_MORE resolved as reduce (%left OP_MORE).
    Conflict between rule 74 and token OP_LESS resolved as reduce (%left OP_LESS).
    Conflict between rule 74 and token PLUS resolved as shift (OP_EQUAL < PLUS).
    Conflict between rule 74 and token MINUS resolved as shift (OP_EQUAL < MINUS).
    Conflict between rule 74 and token ASTERISK resolved as shift (OP_EQUAL < ASTERISK).
    Conflict between rule 74 and token SLASH resolved as shift (OP_EQUAL < SLASH).
    Conflict between rule 74 and token DOT_IDENTIFIER resolved as shift (OP_EQUAL < DOT_IDENTIFIER).


State 105

   62 expression: expression . ARROW expression
   63           | expression . PLUS expression
   64           | expression . MINUS expression
   65           | expression . ASTERISK expression
   66           | expression . SLASH expression
   67           | expression . OP_AND expression
   68           | expression . OP_OR expression
   69           | expression . OP_MORE_EQUAL expression
   70           | expression . OP_LESS_EQUAL expression
   71           | expression . OP_MORE expression
   72           | expression . OP_LESS expression
   73           | expression . OP_NOT_EQUAL expression
   73           | expression OP_NOT_EQUAL expression .  ["end of file", ARROW, OP_AND, OP_OR, OP_EQUAL, OP_NOT_EQUAL, OP_MORE_EQUAL, OP_LESS_EQUAL, OP_MORE, OP_LESS, COMMA, RIGHT_PARENTHESIS, RIGHT_CURLY_BRACE, EOL]
   74           | expression . OP_EQUAL expression
   80 access: expression . DOT_IDENTIFIER

    PLUS            shift, and go to state 74
    MINUS           shift, and go to state 75
    ASTERISK        shift, and go to state 76
    SLASH           shift, and go to state 77
    DOT_IDENTIFIER  shift, and go to state 78

    $default  reduce using rule 73 (expression)

    Conflict between rule 73 and token ARROW resolved as reduce (ARROW < OP_NOT_EQUAL).
    Conflict between rule 73 and token OP_AND resolved as reduce (OP_AND < OP_NOT_EQUAL).
    Conflict between rule 73 and token OP_OR resolved as reduce (OP_OR < OP_NOT_EQUAL).
    Conflict between rule 73 and token OP_EQUAL resolved as reduce (%left OP_EQUAL).
    Conflict between rule 73 and token OP_NOT_EQUAL resolved as reduce (%left OP_NOT_EQUAL).
    Conflict between rule 73 and token OP_MORE_EQUAL resolved as reduce (%left OP_MORE_EQUAL).
    Conflict between rule 73 and token OP_LESS_EQUAL resolved as reduce (%left OP_LESS_EQUAL).
    Conflict between rule 73 and token OP_MORE resolved as reduce (%left OP_MORE).
    Conflict between rule 73 and token OP_LESS resolved as reduce (%left OP_LESS).
    Conflict between rule 73 and token PLUS resolved as shift (OP_NOT_EQUAL < PLUS).
    Conflict between rule 73 and token MINUS resolved as shift (OP_NOT_EQUAL < MINUS).
    Conflict between rule 73 and token ASTERISK resolved as shift (OP_NOT_EQUAL < ASTERISK).
    Conflict between rule 73 and token SLASH resolved as shift (OP_NOT_EQUAL < SLASH).
    Conflict between rule 73 and token DOT_IDENTIFIER resolved as shift (OP_NOT_EQUAL < DOT_IDENTIFIER).


State 106

   62 expression: expression . ARROW expression
   63           | expression . PLUS expression
   64           | expression . MINUS expression
   65           | expression . ASTERISK expression
   66           | expression . SLASH expression
   67           | expression . OP_AND expression
   68           | expression . OP_OR expression
   69           | expression . OP_MORE_EQUAL expression
   69           | expression OP_MORE_EQUAL expression .  ["end of file", ARROW, OP_AND, OP_OR, OP_EQUAL, OP_NOT_EQUAL, OP_MORE_EQUAL, OP_LESS_EQUAL, OP_MORE, OP_LESS, COMMA, RIGHT_PARENTHESIS, RIGHT_CURLY_BRACE, EOL]
   70           | expression . OP_LESS_EQUAL expression
   71           | expression . OP_MORE expression
   72           | expression . OP_LESS expression
   73           | expression . OP_NOT_EQUAL expression
   74           | expression . OP_EQUAL expression
   80 access: expression . DOT_IDENTIFIER

    PLUS            shift, and go to state 74
    MINUS           shift, and go to state 75
    ASTERISK        shift, and go to state 76
    SLASH           shift, and go to state 77
    DOT_IDENTIFIER  shift, and go to state 78

    $default  reduce using rule 69 (expression)

    Conflict between rule 69 and token ARROW resolved as reduce (ARROW < OP_MORE_EQUAL).
    Conflict between rule 69 and token OP_AND resolved as reduce (OP_AND < OP_MORE_EQUAL).
    Conflict between rule 69 and token OP_OR resolved as reduce (OP_OR < OP_MORE_EQUAL).
    Conflict between rule 69 and token OP_EQUAL resolved as reduce (%left OP_EQUAL).
    Conflict between rule 69 and token OP_NOT_EQUAL resolved as reduce (%left OP_NOT_EQUAL).
    Conflict between rule 69 and token OP_MORE_EQUAL resolved as reduce (%left OP_MORE_EQUAL).
    Conflict between rule 69 and token OP_LESS_EQUAL resolved as reduce (%left OP_LESS_EQUAL).
    Conflict between rule 69 and token OP_MORE resolved as reduce (%left OP_MORE).
    Conflict between rule 69 and token OP_LESS resolved as reduce (%left OP_LESS).
    Conflict between rule 69 and token PLUS resolved as shift (OP_MORE_EQUAL < PLUS).
    Conflict between rule 69 and token MINUS resolved as shift (OP_MORE_EQUAL < MINUS).
    Conflict between rule 69 and token ASTERISK resolved as shift (OP_MORE_EQUAL < ASTERISK).
    Conflict between rule 69 and token SLASH resolved as shift (OP_MORE_EQUAL < SLASH).
    Conflict between rule 69 and token DOT_IDENTIFIER resolved as shift (OP_MORE_EQUAL < DOT_IDENTIFIER).


State 107

   62 expression: expression . ARROW expression
   63           | expression . PLUS expression
   64           | expression . MINUS expression
   65           | expression . ASTERISK expression
   66           | expression . SLASH expression
   67           | expression . OP_AND expression
   68           | expression . OP_OR expression
   69           | expression . OP_MORE_EQUAL expression
   70           | expression . OP_LESS_EQUAL expression
   70           | expression OP_LESS_EQUAL expression .  ["end of file", ARROW, OP_AND, OP_OR, OP_EQUAL, OP_NOT_EQUAL, OP_MORE_EQUAL, OP_LESS_EQUAL, OP_MORE, OP_LESS, COMMA, RIGHT_PARENTHESIS, RIGHT_CURLY_BRACE, EOL]
   71           | expression . OP_MORE expression
   72           | expression . OP_LESS expression
   73           | expression . OP_NOT_EQUAL expression
   74           | expression . OP_EQUAL expression
   80 access: expression . DOT_IDENTIFIER

    PLUS            shift, and go to state 74
    MINUS           shift, and go to state 75
    ASTERISK        shift, and go to state 76
    SLASH           shift, and go to state 77
    DOT_IDENTIFIER  shift, and go to state 78

    $default  reduce using rule 70 (expression)

    Conflict between rule 70 and token ARROW resolved as reduce (ARROW < OP_LESS_EQUAL).
    Conflict between rule 70 and token OP_AND resolved as reduce (OP_AND < OP_LESS_EQUAL).
    Conflict between rule 70 and token OP_OR resolved as reduce (OP_OR < OP_LESS_EQUAL).
    Conflict between rule 70 and token OP_EQUAL resolved as reduce (%left OP_EQUAL).
    Conflict between rule 70 and token OP_NOT_EQUAL resolved as reduce (%left OP_NOT_EQUAL).
    Conflict between rule 70 and token OP_MORE_EQUAL resolved as reduce (%left OP_MORE_EQUAL).
    Conflict between rule 70 and token OP_LESS_EQUAL resolved as reduce (%left OP_LESS_EQUAL).
    Conflict between rule 70 and token OP_MORE resolved as reduce (%left OP_MORE).
    Conflict between rule 70 and token OP_LESS resolved as reduce (%left OP_LESS).
    Conflict between rule 70 and token PLUS resolved as shift (OP_LESS_EQUAL < PLUS).
    Conflict between rule 70 and token MINUS resolved as shift (OP_LESS_EQUAL < MINUS).
    Conflict between rule 70 and token ASTERISK resolved as shift (OP_LESS_EQUAL < ASTERISK).
    Conflict between rule 70 and token SLASH resolved as shift (OP_LESS_EQUAL < SLASH).
    Conflict between rule 70 and token DOT_IDENTIFIER resolved as shift (OP_LESS_EQUAL < DOT_IDENTIFIER).


State 108

   62 expression: expression . ARROW expression
   63           | expression . PLUS expression
   64           | expression . MINUS expression
   65           | expression . ASTERISK expression
   66           | expression . SLASH expression
   67           | expression . OP_AND expression
   68           | expression . OP_OR expression
   69           | expression . OP_MORE_EQUAL expression
   70           | expression . OP_LESS_EQUAL expression
   71           | expression . OP_MORE expression
   71           | expression OP_MORE expression .  ["end of file", ARROW, OP_AND, OP_OR, OP_EQUAL, OP_NOT_EQUAL, OP_MORE_EQUAL, OP_LESS_EQUAL, OP_MORE, OP_LESS, COMMA, RIGHT_PARENTHESIS, RIGHT_CURLY_BRACE, EOL]
   72           | expression . OP_LESS expression
   73           | expression . OP_NOT_EQUAL expression
   74           | expression . OP_EQUAL expression
   80 access: expression . DOT_IDENTIFIER

    PLUS            shift, and go to state 74
    MINUS           shift, and go to state 75
    ASTERISK        shift, and go to state 76
    SLASH           shift, and go to state 77
    DOT_IDENTIFIER  shift, and go to state 78

    $default  reduce using rule 71 (expression)

    Conflict between rule 71 and token ARROW resolved as reduce (ARROW < OP_MORE).
    Conflict between rule 71 and token OP_AND resolved as reduce (OP_AND < OP_MORE).
    Conflict between rule 71 and token OP_OR resolved as reduce (OP_OR < OP_MORE).
    Conflict between rule 71 and token OP_EQUAL resolved as reduce (%left OP_EQUAL).
    Conflict between rule 71 and token OP_NOT_EQUAL resolved as reduce (%left OP_NOT_EQUAL).
    Conflict between rule 71 and token OP_MORE_EQUAL resolved as reduce (%left OP_MORE_EQUAL).
    Conflict between rule 71 and token OP_LESS_EQUAL resolved as reduce (%left OP_LESS_EQUAL).
    Conflict between rule 71 and token OP_MORE resolved as reduce (%left OP_MORE).
    Conflict between rule 71 and token OP_LESS resolved as reduce (%left OP_LESS).
    Conflict between rule 71 and token PLUS resolved as shift (OP_MORE < PLUS).
    Conflict between rule 71 and token MINUS resolved as shift (OP_MORE < MINUS).
    Conflict between rule 71 and token ASTERISK resolved as shift (OP_MORE < ASTERISK).
    Conflict between rule 71 and token SLASH resolved as shift (OP_MORE < SLASH).
    Conflict between rule 71 and token DOT_IDENTIFIER resolved as shift (OP_MORE < DOT_IDENTIFIER).


State 109

   62 expression: expression . ARROW expression
   63           | expression . PLUS expression
   64           | expression . MINUS expression
   65           | expression . ASTERISK expression
   66           | expression . SLASH expression
   67           | expression . OP_AND expression
   68           | expression . OP_OR expression
   69           | expression . OP_MORE_EQUAL expression
   70           | expression . OP_LESS_EQUAL expression
   71           | expression . OP_MORE expression
   72           | expression . OP_LESS expression
   72           | expression OP_LESS expression .  ["end of file", ARROW, OP_AND, OP_OR, OP_EQUAL, OP_NOT_EQUAL, OP_MORE_EQUAL, OP_LESS_EQUAL, OP_MORE, OP_LESS, COMMA, RIGHT_PARENTHESIS, RIGHT_CURLY_BRACE, EOL]
   73           | expression . OP_NOT_EQUAL expression
   74           | expression . OP_EQUAL expression
   80 access: expression . DOT_IDENTIFIER

    PLUS            shift, and go to state 74
    MINUS           shift, and go to state 75
    ASTERISK        shift, and go to state 76
    SLASH           shift, and go to state 77
    DOT_IDENTIFIER  shift, and go to state 78

    $default  reduce using rule 72 (expression)

    Conflict between rule 72 and token ARROW resolved as reduce (ARROW < OP_LESS).
    Conflict between rule 72 and token OP_AND resolved as reduce (OP_AND < OP_LESS).
    Conflict between rule 72 and token OP_OR resolved as reduce (OP_OR < OP_LESS).
    Conflict between rule 72 and token OP_EQUAL resolved as reduce (%left OP_EQUAL).
    Conflict between rule 72 and token OP_NOT_EQUAL resolved as reduce (%left OP_NOT_EQUAL).
    Conflict between rule 72 and token OP_MORE_EQUAL resolved as reduce (%left OP_MORE_EQUAL).
    Conflict between rule 72 and token OP_LESS_EQUAL resolved as reduce (%left OP_LESS_EQUAL).
    Conflict between rule 72 and token OP_MORE resolved as reduce (%left OP_MORE).
    Conflict between rule 72 and token OP_LESS resolved as reduce (%left OP_LESS).
    Conflict between rule 72 and token PLUS resolved as shift (OP_LESS < PLUS).
    Conflict between rule 72 and token MINUS resolved as shift (OP_LESS < MINUS).
    Conflict between rule 72 and token ASTERISK resolved as shift (OP_LESS < ASTERISK).
    Conflict between rule 72 and token SLASH resolved as shift (OP_LESS < SLASH).
    Conflict between rule 72 and token DOT_IDENTIFIER resolved as shift (OP_LESS < DOT_IDENTIFIER).


State 110

   62 expression: expression . ARROW expression
   63           | expression . PLUS expression
   63           | expression PLUS expression .  ["end of file", ARROW, OP_AND, OP_OR, OP_EQUAL, OP_NOT_EQUAL, OP_MORE_EQUAL, OP_LESS_EQUAL, OP_MORE, OP_LESS, PLUS, MINUS, COMMA, RIGHT_PARENTHESIS, RIGHT_CURLY_BRACE, EOL]
   64           | expression . MINUS expression
   65           | expression . ASTERISK expression
   66           | expression . SLASH expression
   67           | expression . OP_AND expression
   68           | expression . OP_OR expression
   69           | expression . OP_MORE_EQUAL expression
   70           | expression . OP_LESS_EQUAL expression
   71           | expression . OP_MORE expression
   72           | expression . OP_LESS expression
   73           | expression . OP_NOT_EQUAL expression
   74           | expression . OP_EQUAL expression
   80 access: expression . DOT_IDENTIFIER

    ASTERISK        shift, and go to state 76
    SLASH           shift, and go to state 77
    DOT_IDENTIFIER  shift, and go to state 78

    $default  reduce using rule 63 (expression)

    Conflict between rule 63 and token ARROW resolved as reduce (ARROW < PLUS).
    Conflict between rule 63 and token OP_AND resolved as reduce (OP_AND < PLUS).
    Conflict between rule 63 and token OP_OR resolved as reduce (OP_OR < PLUS).
    Conflict between rule 63 and token OP_EQUAL resolved as reduce (OP_EQUAL < PLUS).
    Conflict between rule 63 and token OP_NOT_EQUAL resolved as reduce (OP_NOT_EQUAL < PLUS).
    Conflict between rule 63 and token OP_MORE_EQUAL resolved as reduce (OP_MORE_EQUAL < PLUS).
    Conflict between rule 63 and token OP_LESS_EQUAL resolved as reduce (OP_LESS_EQUAL < PLUS).
    Conflict between rule 63 and token OP_MORE resolved as reduce (OP_MORE < PLUS).
    Conflict between rule 63 and token OP_LESS resolved as reduce (OP_LESS < PLUS).
    Conflict between rule 63 and token PLUS resolved as reduce (%left PLUS).
    Conflict between rule 63 and token MINUS resolved as reduce (%left MINUS).
    Conflict between rule 63 and token ASTERISK resolved as shift (PLUS < ASTERISK).
    Conflict between rule 63 and token SLASH resolved as shift (PLUS < SLASH).
    Conflict between rule 63 and token DOT_IDENTIFIER resolved as shift (PLUS < DOT_IDENTIFIER).


State 111

   62 expression: expression . ARROW expression
   63           | expression . PLUS expression
   64           | expression . MINUS expression
   64           | expression MINUS expression .  ["end of file", ARROW, OP_AND, OP_OR, OP_EQUAL, OP_NOT_EQUAL, OP_MORE_EQUAL, OP_LESS_EQUAL, OP_MORE, OP_LESS, PLUS, MINUS, COMMA, RIGHT_PARENTHESIS, RIGHT_CURLY_BRACE, EOL]
   65           | expression . ASTERISK expression
   66           | expression . SLASH expression
   67           | expression . OP_AND expression
   68           | expression . OP_OR expression
   69           | expression . OP_MORE_EQUAL expression
   70           | expression . OP_LESS_EQUAL expression
   71           | expression . OP_MORE expression
   72           | expression . OP_LESS expression
   73           | expression . OP_NOT_EQUAL expression
   74           | expression . OP_EQUAL expression
   80 access: expression . DOT_IDENTIFIER

    ASTERISK        shift, and go to state 76
    SLASH           shift, and go to state 77
    DOT_IDENTIFIER  shift, and go to state 78

    $default  reduce using rule 64 (expression)

    Conflict between rule 64 and token ARROW resolved as reduce (ARROW < MINUS).
    Conflict between rule 64 and token OP_AND resolved as reduce (OP_AND < MINUS).
    Conflict between rule 64 and token OP_OR resolved as reduce (OP_OR < MINUS).
    Conflict between rule 64 and token OP_EQUAL resolved as reduce (OP_EQUAL < MINUS).
    Conflict between rule 64 and token OP_NOT_EQUAL resolved as reduce (OP_NOT_EQUAL < MINUS).
    Conflict between rule 64 and token OP_MORE_EQUAL resolved as reduce (OP_MORE_EQUAL < MINUS).
    Conflict between rule 64 and token OP_LESS_EQUAL resolved as reduce (OP_LESS_EQUAL < MINUS).
    Conflict between rule 64 and token OP_MORE resolved as reduce (OP_MORE < MINUS).
    Conflict between rule 64 and token OP_LESS resolved as reduce (OP_LESS < MINUS).
    Conflict between rule 64 and token PLUS resolved as reduce (%left PLUS).
    Conflict between rule 64 and token MINUS resolved as reduce (%left MINUS).
    Conflict between rule 64 and token ASTERISK resolved as shift (MINUS < ASTERISK).
    Conflict between rule 64 and token SLASH resolved as shift (MINUS < SLASH).
    Conflict between rule 64 and token DOT_IDENTIFIER resolved as shift (MINUS < DOT_IDENTIFIER).


State 112

   62 expression: expression . ARROW expression
   63           | expression . PLUS expression
   64           | expression . MINUS expression
   65           | expression . ASTERISK expression
   65           | expression ASTERISK expression .  ["end of file", ARROW, OP_AND, OP_OR, OP_EQUAL, OP_NOT_EQUAL, OP_MORE_EQUAL, OP_LESS_EQUAL, OP_MORE, OP_LESS, PLUS, MINUS, ASTERISK, SLASH, COMMA, RIGHT_PARENTHESIS, RIGHT_CURLY_BRACE, EOL]
   66           | expression . SLASH expression
   67           | expression . OP_AND expression
   68           | expression . OP_OR expression
   69           | expression . OP_MORE_EQUAL expression
   70           | expression . OP_LESS_EQUAL expression
   71           | expression . OP_MORE expression
   72           | expression . OP_LESS expression
   73           | expression . OP_NOT_EQUAL expression
   74           | expression . OP_EQUAL expression
   80 access: expression . DOT_IDENTIFIER

    DOT_IDENTIFIER  shift, and go to state 78

    $default  reduce using rule 65 (expression)

    Conflict between rule 65 and token ARROW resolved as reduce (ARROW < ASTERISK).
    Conflict between rule 65 and token OP_AND resolved as reduce (OP_AND < ASTERISK).
    Conflict between rule 65 and token OP_OR resolved as reduce (OP_OR < ASTERISK).
    Conflict between rule 65 and token OP_EQUAL resolved as reduce (OP_EQUAL < ASTERISK).
    Conflict between rule 65 and token OP_NOT_EQUAL resolved as reduce (OP_NOT_EQUAL < ASTERISK).
    Conflict between rule 65 and token OP_MORE_EQUAL resolved as reduce (OP_MORE_EQUAL < ASTERISK).
    Conflict between rule 65 and token OP_LESS_EQUAL resolved as reduce (OP_LESS_EQUAL < ASTERISK).
    Conflict between rule 65 and token OP_MORE resolved as reduce (OP_MORE < ASTERISK).
    Conflict between rule 65 and token OP_LESS resolved as reduce (OP_LESS < ASTERISK).
    Conflict between rule 65 and token PLUS resolved as reduce (PLUS < ASTERISK).
    Conflict between rule 65 and token MINUS resolved as reduce (MINUS < ASTERISK).
    Conflict between rule 65 and token ASTERISK resolved as reduce (%left ASTERISK).
    Conflict between rule 65 and token SLASH resolved as reduce (%left SLASH).
    Conflict between rule 65 and token DOT_IDENTIFIER resolved as shift (ASTERISK < DOT_IDENTIFIER).


State 113

   62 expression: expression . ARROW expression
   63           | expression . PLUS expression
   64           | expression . MINUS expression
   65           | expression . ASTERISK expression
   66           | expression . SLASH expression
   66           | expression SLASH expression .  ["end of file", ARROW, OP_AND, OP_OR, OP_EQUAL, OP_NOT_EQUAL, OP_MORE_EQUAL, OP_LESS_EQUAL, OP_MORE, OP_LESS, PLUS, MINUS, ASTERISK, SLASH, COMMA, RIGHT_PARENTHESIS, RIGHT_CURLY_BRACE, EOL]
   67           | expression . OP_AND expression
   68           | expression . OP_OR expression
   69           | expression . OP_MORE_EQUAL expression
   70           | expression . OP_LESS_EQUAL expression
   71           | expression . OP_MORE expression
   72           | expression . OP_LESS expression
   73           | expression . OP_NOT_EQUAL expression
   74           | expression . OP_EQUAL expression
   80 access: expression . DOT_IDENTIFIER

    DOT_IDENTIFIER  shift, and go to state 78

    $default  reduce using rule 66 (expression)

    Conflict between rule 66 and token ARROW resolved as reduce (ARROW < SLASH).
    Conflict between rule 66 and token OP_AND resolved as reduce (OP_AND < SLASH).
    Conflict between rule 66 and token OP_OR resolved as reduce (OP_OR < SLASH).
    Conflict between rule 66 and token OP_EQUAL resolved as reduce (OP_EQUAL < SLASH).
    Conflict between rule 66 and token OP_NOT_EQUAL resolved as reduce (OP_NOT_EQUAL < SLASH).
    Conflict between rule 66 and token OP_MORE_EQUAL resolved as reduce (OP_MORE_EQUAL < SLASH).
    Conflict between rule 66 and token OP_LESS_EQUAL resolved as reduce (OP_LESS_EQUAL < SLASH).
    Conflict between rule 66 and token OP_MORE resolved as reduce (OP_MORE < SLASH).
    Conflict between rule 66 and token OP_LESS resolved as reduce (OP_LESS < SLASH).
    Conflict between rule 66 and token PLUS resolved as reduce (PLUS < SLASH).
    Conflict between rule 66 and token MINUS resolved as reduce (MINUS < SLASH).
    Conflict between rule 66 and token ASTERISK resolved as reduce (%left ASTERISK).
    Conflict between rule 66 and token SLASH resolved as reduce (%left SLASH).
    Conflict between rule 66 and token DOT_IDENTIFIER resolved as shift (SLASH < DOT_IDENTIFIER).


State 114

   62 expression: expression . ARROW expression
   63           | expression . PLUS expression
   64           | expression . MINUS expression
   65           | expression . ASTERISK expression
   66           | expression . SLASH expression
   67           | expression . OP_AND expression
   68           | expression . OP_OR expression
   69           | expression . OP_MORE_EQUAL expression
   70           | expression . OP_LESS_EQUAL expression
   71           | expression . OP_MORE expression
   72           | expression . OP_LESS expression
   73           | expression . OP_NOT_EQUAL expression
   74           | expression . OP_EQUAL expression
   80 access: expression . DOT_IDENTIFIER
   82 assign_variable: access EQUAL expression .  ["end of file", COMMA, RIGHT_PARENTHESIS, RIGHT_CURLY_BRACE, EOL]

    ARROW           shift, and go to state 65
    OP_AND          shift, and go to state 66
    OP_OR           shift, and go to state 67
    OP_EQUAL        shift, and go to state 68
    OP_NOT_EQUAL    shift, and go to state 69
    OP_MORE_EQUAL   shift, and go to state 70
    OP_LESS_EQUAL   shift, and go to state 71
    OP_MORE         shift, and go to state 72
    OP_LESS         shift, and go to state 73
    PLUS            shift, and go to state 74
    MINUS           shift, and go to state 75
    ASTERISK        shift, and go to state 76
    SLASH           shift, and go to state 77
    DOT_IDENTIFIER  shift, and go to state 78

    $default  reduce using rule 82 (assign_variable)

    Conflict between rule 82 and token ARROW resolved as shift (%right ARROW).
    Conflict between rule 82 and token OP_AND resolved as shift (EQUAL < OP_AND).
    Conflict between rule 82 and token OP_OR resolved as shift (EQUAL < OP_OR).
    Conflict between rule 82 and token OP_EQUAL resolved as shift (EQUAL < OP_EQUAL).
    Conflict between rule 82 and token OP_NOT_EQUAL resolved as shift (EQUAL < OP_NOT_EQUAL).
    Conflict between rule 82 and token OP_MORE_EQUAL resolved as shift (EQUAL < OP_MORE_EQUAL).
    Conflict between rule 82 and token OP_LESS_EQUAL resolved as shift (EQUAL < OP_LESS_EQUAL).
    Conflict between rule 82 and token OP_MORE resolved as shift (EQUAL < OP_MORE).
    Conflict between rule 82 and token OP_LESS resolved as shift (EQUAL < OP_LESS).
    Conflict between rule 82 and token PLUS resolved as shift (EQUAL < PLUS).
    Conflict between rule 82 and token MINUS resolved as shift (EQUAL < MINUS).
    Conflict between rule 82 and token ASTERISK resolved as shift (EQUAL < ASTERISK).
    Conflict between rule 82 and token SLASH resolved as shift (EQUAL < SLASH).
    Conflict between rule 82 and token DOT_IDENTIFIER resolved as shift (EQUAL < DOT_IDENTIFIER).


State 115

   91 call: access LEFT_PARENTHESIS RIGHT_PARENTHESIS .

    $default  reduce using rule 91 (call)


State 116

   52 expressions: expressions . COMMA expression
   90 call: access LEFT_PARENTHESIS expressions . RIGHT_PARENTHESIS

    COMMA              shift, and go to state 85
    RIGHT_PARENTHESIS  shift, and go to state 142


State 117

   33 C_type_identifier: IDENTIFIER .

    $default  reduce using rule 33 (C_type_identifier)


State 118

   50 c_function_declaration: C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT EOL . C_FUNCTION_RETURN C_returns EOL

    C_FUNCTION_RETURN  shift, and go to state 143


State 119

   34 C_type_identifier: C_type_identifier . IDENTIFIER
   35 C_arguments: C_type_identifier .  [COMMA, EOL]

    IDENTIFIER  shift, and go to state 144

    $default  reduce using rule 35 (C_arguments)


State 120

   36 C_arguments: C_arguments . COMMA C_type_identifier
   49 c_function_declaration: C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT C_arguments . EOL C_FUNCTION_RETURN C_returns EOL

    COMMA  shift, and go to state 145
    EOL    shift, and go to state 146


State 121

   88 call: IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS .

    $default  reduce using rule 88 (call)


State 122

   52 expressions: expressions COMMA expression .  [COMMA, RIGHT_PARENTHESIS, RIGHT_CURLY_BRACE]
   62 expression: expression . ARROW expression
   63           | expression . PLUS expression
   64           | expression . MINUS expression
   65           | expression . ASTERISK expression
   66           | expression . SLASH expression
   67           | expression . OP_AND expression
   68           | expression . OP_OR expression
   69           | expression . OP_MORE_EQUAL expression
   70           | expression . OP_LESS_EQUAL expression
   71           | expression . OP_MORE expression
   72           | expression . OP_LESS expression
   73           | expression . OP_NOT_EQUAL expression
   74           | expression . OP_EQUAL expression
   80 access: expression . DOT_IDENTIFIER

    ARROW           shift, and go to state 65
    OP_AND          shift, and go to state 66
    OP_OR           shift, and go to state 67
    OP_EQUAL        shift, and go to state 68
    OP_NOT_EQUAL    shift, and go to state 69
    OP_MORE_EQUAL   shift, and go to state 70
    OP_LESS_EQUAL   shift, and go to state 71
    OP_MORE         shift, and go to state 72
    OP_LESS         shift, and go to state 73
    PLUS            shift, and go to state 74
    MINUS           shift, and go to state 75
    ASTERISK        shift, and go to state 76
    SLASH           shift, and go to state 77
    DOT_IDENTIFIER  shift, and go to state 78

    $default  reduce using rule 52 (expressions)


State 123

   55 for_start: FOR expression COMMA expression . COMMA expression
   62 expression: expression . ARROW expression
   63           | expression . PLUS expression
   64           | expression . MINUS expression
   65           | expression . ASTERISK expression
   66           | expression . SLASH expression
   67           | expression . OP_AND expression
   68           | expression . OP_OR expression
   69           | expression . OP_MORE_EQUAL expression
   70           | expression . OP_LESS_EQUAL expression
   71           | expression . OP_MORE expression
   72           | expression . OP_LESS expression
   73           | expression . OP_NOT_EQUAL expression
   74           | expression . OP_EQUAL expression
   80 access: expression . DOT_IDENTIFIER

    ARROW           shift, and go to state 65
    OP_AND          shift, and go to state 66
    OP_OR           shift, and go to state 67
    OP_EQUAL        shift, and go to state 68
    OP_NOT_EQUAL    shift, and go to state 69
    OP_MORE_EQUAL   shift, and go to state 70
    OP_LESS_EQUAL   shift, and go to state 71
    OP_MORE         shift, and go to state 72
    OP_LESS         shift, and go to state 73
    PLUS            shift, and go to state 74
    MINUS           shift, and go to state 75
    ASTERISK        shift, and go to state 76
    SLASH           shift, and go to state 77
    DOT_IDENTIFIER  shift, and go to state 78
    COMMA           shift, and go to state 147


State 124

   43 definition_arguments: definition_arguments COMMA . IDENTIFIER

    IDENTIFIER  shift, and go to state 148


State 125

   40 arguments: LEFT_PARENTHESIS definition_arguments RIGHT_PARENTHESIS .

    $default  reduce using rule 40 (arguments)


State 126

   38 return_value: RETURN . expression
   39             | RETURN .  [EOL]
   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 while_start: . WHILE expression
   57 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   60           | . while_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   61           | . assign_variable
   62           | . expression ARROW expression
   63           | . expression PLUS expression
   64           | . expression MINUS expression
   65           | . expression ASTERISK expression
   66           | . expression SLASH expression
   67           | . expression OP_AND expression
   68           | . expression OP_OR expression
   69           | . expression OP_MORE_EQUAL expression
   70           | . expression OP_LESS_EQUAL expression
   71           | . expression OP_MORE expression
   72           | . expression OP_LESS expression
   73           | . expression OP_NOT_EQUAL expression
   74           | . expression OP_EQUAL expression
   75           | . monomial
   76           | . list
   77           | . access
   78 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   79     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   80 access: . expression DOT_IDENTIFIER
   81 assign_variable: . IDENTIFIER EQUAL expression
   82                | . access EQUAL expression
   83 monomial: . call
   84         | . STRING_LITERAL
   85         | . FLOAT_LITERAL
   86         | . INT_LITERAL
   87         | . variable
   88 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   91     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   92 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    WHILE             shift, and go to state 10
    STRING_LITERAL    shift, and go to state 13
    INT_LITERAL       shift, and go to state 14
    FLOAT_LITERAL     shift, and go to state 15

    $default  reduce using rule 39 (return_value)

    if_start         go to state 32
    else_start       go to state 33
    for_start        go to state 34
    while_start      go to state 35
    expression       go to state 149
    list             go to state 37
    access           go to state 38
    assign_variable  go to state 39
    monomial         go to state 40
    call             go to state 41
    variable         go to state 42


State 127

   16 function_definition: function_start arguments EOL block . return_value EOL
   38 return_value: . RETURN expression
   39             | . RETURN

    RETURN  shift, and go to state 126

    return_value  go to state 150


State 128

   17 function_definition: function_start arguments EOL return_value . EOL

    EOL  shift, and go to state 151


State 129

   27 method_definition: METHOD_DEFINITION . arguments EOL block return_value
   40 arguments: . LEFT_PARENTHESIS definition_arguments RIGHT_PARENTHESIS
   41          | . LEFT_PARENTHESIS RIGHT_PARENTHESIS

    LEFT_PARENTHESIS  shift, and go to state 56

    arguments  go to state 152


State 130

   28 members_definition: MEMBER_IDENTIFIER . EQUAL expression EOL

    EQUAL  shift, and go to state 153


State 131

   30 members_definition: EOL .

    $default  reduce using rule 30 (members_definition)


State 132

   21 class_definition: class_start arguments EOL methods .  ["end of file", FUNCTION_DEFINITION, CLASS_DEFINITION, C_TYPE_DEFINITION, C_FUNCTION_DECLARATION, RETURN, IDENTIFIER, RIGHT_PARENTHESIS, LEFT_CURLY_BRACE, IF, ELSE, FOR, WHILE, GLOBAL, IMPORT, STRING_LITERAL, INT_LITERAL, FLOAT_LITERAL]
   26 methods: methods . method_definition EOL
   27 method_definition: . METHOD_DEFINITION arguments EOL block return_value

    METHOD_DEFINITION  shift, and go to state 129

    $default  reduce using rule 21 (class_definition)

    method_definition  go to state 154


State 133

   25 methods: method_definition . EOL

    EOL  shift, and go to state 155


State 134

   19 class_definition: class_start arguments EOL members_definition . methods
   20                 | class_start arguments EOL members_definition .  ["end of file", FUNCTION_DEFINITION, CLASS_DEFINITION, C_TYPE_DEFINITION, C_FUNCTION_DECLARATION, RETURN, IDENTIFIER, RIGHT_PARENTHESIS, LEFT_CURLY_BRACE, IF, ELSE, FOR, WHILE, GLOBAL, IMPORT, STRING_LITERAL, INT_LITERAL, FLOAT_LITERAL]
   25 methods: . method_definition EOL
   26        | . methods method_definition EOL
   27 method_definition: . METHOD_DEFINITION arguments EOL block return_value
   29 members_definition: members_definition . MEMBER_IDENTIFIER EQUAL expression EOL

    METHOD_DEFINITION  shift, and go to state 129
    MEMBER_IDENTIFIER  shift, and go to state 156

    $default  reduce using rule 20 (class_definition)

    methods            go to state 157
    method_definition  go to state 133


State 135

   31 C_members_definition: MEMBER_IDENTIFIER EQUAL . C_type_identifier EOL
   33 C_type_identifier: . IDENTIFIER
   34                  | . C_type_identifier IDENTIFIER

    IDENTIFIER  shift, and go to state 117

    C_type_identifier  go to state 158


State 136

   32 C_members_definition: C_members_definition MEMBER_IDENTIFIER . EQUAL C_type_identifier EOL

    EQUAL  shift, and go to state 159


State 137

   45 globals_definition: global_start EOL LEFT_PARENTHESIS EOL . globals_variables EOL RIGHT_PARENTHESIS EOL
   47 globals_variables: . assign_variable
   48                  | . globals_variables EOL assign_variable
   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 while_start: . WHILE expression
   57 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   60           | . while_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   61           | . assign_variable
   62           | . expression ARROW expression
   63           | . expression PLUS expression
   64           | . expression MINUS expression
   65           | . expression ASTERISK expression
   66           | . expression SLASH expression
   67           | . expression OP_AND expression
   68           | . expression OP_OR expression
   69           | . expression OP_MORE_EQUAL expression
   70           | . expression OP_LESS_EQUAL expression
   71           | . expression OP_MORE expression
   72           | . expression OP_LESS expression
   73           | . expression OP_NOT_EQUAL expression
   74           | . expression OP_EQUAL expression
   75           | . monomial
   76           | . list
   77           | . access
   78 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   79     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   80 access: . expression DOT_IDENTIFIER
   81 assign_variable: . IDENTIFIER EQUAL expression
   82                | . access EQUAL expression
   83 monomial: . call
   84         | . STRING_LITERAL
   85         | . FLOAT_LITERAL
   86         | . INT_LITERAL
   87         | . variable
   88 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   91     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   92 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    WHILE             shift, and go to state 10
    STRING_LITERAL    shift, and go to state 13
    INT_LITERAL       shift, and go to state 14
    FLOAT_LITERAL     shift, and go to state 15

    globals_variables  go to state 160
    if_start           go to state 32
    else_start         go to state 33
    for_start          go to state 34
    while_start        go to state 35
    expression         go to state 161
    list               go to state 37
    access             go to state 38
    assign_variable    go to state 162
    monomial           go to state 40
    call               go to state 41
    variable           go to state 42


State 138

   57 expression: if_start expression EOL LEFT_PARENTHESIS . EOL block RIGHT_PARENTHESIS

    EOL  shift, and go to state 163


State 139

    2 block: . lines
    3 lines: . line
    4      | . lines line
    5 line: . line_content EOL
    6     | . line_content "end of file"
    7     | . definition
    8     | . import
    9 import: . IMPORT STRING_LITERAL EOL
   10 line_content: . expression
   11 definition: . function_definition
   12           | . class_definition
   13           | . c_type_definition
   14           | . globals_definition
   15           | . c_function_declaration
   16 function_definition: . function_start arguments EOL block return_value EOL
   17                    | . function_start arguments EOL return_value EOL
   18 function_start: . FUNCTION_DEFINITION
   19 class_definition: . class_start arguments EOL members_definition methods
   20                 | . class_start arguments EOL members_definition
   21                 | . class_start arguments EOL methods
   22 class_start: . CLASS_DEFINITION
   23 c_type_definition: . c_type_start EOL C_members_definition
   24 c_type_start: . C_TYPE_DEFINITION
   45 globals_definition: . global_start EOL LEFT_PARENTHESIS EOL globals_variables EOL RIGHT_PARENTHESIS EOL
   46 global_start: . GLOBAL
   49 c_function_declaration: . C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT C_arguments EOL C_FUNCTION_RETURN C_returns EOL
   50                       | . C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT EOL C_FUNCTION_RETURN C_returns EOL
   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 while_start: . WHILE expression
   57 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | else_start EOL LEFT_PARENTHESIS EOL . block RIGHT_PARENTHESIS
   59           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   60           | . while_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   61           | . assign_variable
   62           | . expression ARROW expression
   63           | . expression PLUS expression
   64           | . expression MINUS expression
   65           | . expression ASTERISK expression
   66           | . expression SLASH expression
   67           | . expression OP_AND expression
   68           | . expression OP_OR expression
   69           | . expression OP_MORE_EQUAL expression
   70           | . expression OP_LESS_EQUAL expression
   71           | . expression OP_MORE expression
   72           | . expression OP_LESS expression
   73           | . expression OP_NOT_EQUAL expression
   74           | . expression OP_EQUAL expression
   75           | . monomial
   76           | . list
   77           | . access
   78 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   79     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   80 access: . expression DOT_IDENTIFIER
   81 assign_variable: . IDENTIFIER EQUAL expression
   82                | . access EQUAL expression
   83 monomial: . call
   84         | . STRING_LITERAL
   85         | . FLOAT_LITERAL
   86         | . INT_LITERAL
   87         | . variable
   88 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   91     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   92 variable: . IDENTIFIER

    FUNCTION_DEFINITION     shift, and go to state 1
    CLASS_DEFINITION        shift, and go to state 2
    C_TYPE_DEFINITION       shift, and go to state 3
    C_FUNCTION_DECLARATION  shift, and go to state 4
    IDENTIFIER              shift, and go to state 5
    LEFT_CURLY_BRACE        shift, and go to state 6
    IF                      shift, and go to state 7
    ELSE                    shift, and go to state 8
    FOR                     shift, and go to state 9
    WHILE                   shift, and go to state 10
    GLOBAL                  shift, and go to state 11
    IMPORT                  shift, and go to state 12
    STRING_LITERAL          shift, and go to state 13
    INT_LITERAL             shift, and go to state 14
    FLOAT_LITERAL           shift, and go to state 15

    block                   go to state 164
    lines                   go to state 18
    line                    go to state 19
    import                  go to state 20
    line_content            go to state 21
    definition              go to state 22
    function_definition     go to state 23
    function_start          go to state 24
    class_definition        go to state 25
    class_start             go to state 26
    c_type_definition       go to state 27
    c_type_start            go to state 28
    globals_definition      go to state 29
    global_start            go to state 30
    c_function_declaration  go to state 31
    if_start                go to state 32
    else_start              go to state 33
    for_start               go to state 34
    while_start             go to state 35
    expression              go to state 36
    list                    go to state 37
    access                  go to state 38
    assign_variable         go to state 39
    monomial                go to state 40
    call                    go to state 41
    variable                go to state 42


State 140

    2 block: . lines
    3 lines: . line
    4      | . lines line
    5 line: . line_content EOL
    6     | . line_content "end of file"
    7     | . definition
    8     | . import
    9 import: . IMPORT STRING_LITERAL EOL
   10 line_content: . expression
   11 definition: . function_definition
   12           | . class_definition
   13           | . c_type_definition
   14           | . globals_definition
   15           | . c_function_declaration
   16 function_definition: . function_start arguments EOL block return_value EOL
   17                    | . function_start arguments EOL return_value EOL
   18 function_start: . FUNCTION_DEFINITION
   19 class_definition: . class_start arguments EOL members_definition methods
   20                 | . class_start arguments EOL members_definition
   21                 | . class_start arguments EOL methods
   22 class_start: . CLASS_DEFINITION
   23 c_type_definition: . c_type_start EOL C_members_definition
   24 c_type_start: . C_TYPE_DEFINITION
   45 globals_definition: . global_start EOL LEFT_PARENTHESIS EOL globals_variables EOL RIGHT_PARENTHESIS EOL
   46 global_start: . GLOBAL
   49 c_function_declaration: . C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT C_arguments EOL C_FUNCTION_RETURN C_returns EOL
   50                       | . C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT EOL C_FUNCTION_RETURN C_returns EOL
   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 while_start: . WHILE expression
   57 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | for_start EOL LEFT_PARENTHESIS EOL . block RIGHT_PARENTHESIS
   60           | . while_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   61           | . assign_variable
   62           | . expression ARROW expression
   63           | . expression PLUS expression
   64           | . expression MINUS expression
   65           | . expression ASTERISK expression
   66           | . expression SLASH expression
   67           | . expression OP_AND expression
   68           | . expression OP_OR expression
   69           | . expression OP_MORE_EQUAL expression
   70           | . expression OP_LESS_EQUAL expression
   71           | . expression OP_MORE expression
   72           | . expression OP_LESS expression
   73           | . expression OP_NOT_EQUAL expression
   74           | . expression OP_EQUAL expression
   75           | . monomial
   76           | . list
   77           | . access
   78 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   79     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   80 access: . expression DOT_IDENTIFIER
   81 assign_variable: . IDENTIFIER EQUAL expression
   82                | . access EQUAL expression
   83 monomial: . call
   84         | . STRING_LITERAL
   85         | . FLOAT_LITERAL
   86         | . INT_LITERAL
   87         | . variable
   88 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   91     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   92 variable: . IDENTIFIER

    FUNCTION_DEFINITION     shift, and go to state 1
    CLASS_DEFINITION        shift, and go to state 2
    C_TYPE_DEFINITION       shift, and go to state 3
    C_FUNCTION_DECLARATION  shift, and go to state 4
    IDENTIFIER              shift, and go to state 5
    LEFT_CURLY_BRACE        shift, and go to state 6
    IF                      shift, and go to state 7
    ELSE                    shift, and go to state 8
    FOR                     shift, and go to state 9
    WHILE                   shift, and go to state 10
    GLOBAL                  shift, and go to state 11
    IMPORT                  shift, and go to state 12
    STRING_LITERAL          shift, and go to state 13
    INT_LITERAL             shift, and go to state 14
    FLOAT_LITERAL           shift, and go to state 15

    block                   go to state 165
    lines                   go to state 18
    line                    go to state 19
    import                  go to state 20
    line_content            go to state 21
    definition              go to state 22
    function_definition     go to state 23
    function_start          go to state 24
    class_definition        go to state 25
    class_start             go to state 26
    c_type_definition       go to state 27
    c_type_start            go to state 28
    globals_definition      go to state 29
    global_start            go to state 30
    c_function_declaration  go to state 31
    if_start                go to state 32
    else_start              go to state 33
    for_start               go to state 34
    while_start             go to state 35
    expression              go to state 36
    list                    go to state 37
    access                  go to state 38
    assign_variable         go to state 39
    monomial                go to state 40
    call                    go to state 41
    variable                go to state 42


State 141

    2 block: . lines
    3 lines: . line
    4      | . lines line
    5 line: . line_content EOL
    6     | . line_content "end of file"
    7     | . definition
    8     | . import
    9 import: . IMPORT STRING_LITERAL EOL
   10 line_content: . expression
   11 definition: . function_definition
   12           | . class_definition
   13           | . c_type_definition
   14           | . globals_definition
   15           | . c_function_declaration
   16 function_definition: . function_start arguments EOL block return_value EOL
   17                    | . function_start arguments EOL return_value EOL
   18 function_start: . FUNCTION_DEFINITION
   19 class_definition: . class_start arguments EOL members_definition methods
   20                 | . class_start arguments EOL members_definition
   21                 | . class_start arguments EOL methods
   22 class_start: . CLASS_DEFINITION
   23 c_type_definition: . c_type_start EOL C_members_definition
   24 c_type_start: . C_TYPE_DEFINITION
   45 globals_definition: . global_start EOL LEFT_PARENTHESIS EOL globals_variables EOL RIGHT_PARENTHESIS EOL
   46 global_start: . GLOBAL
   49 c_function_declaration: . C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT C_arguments EOL C_FUNCTION_RETURN C_returns EOL
   50                       | . C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT EOL C_FUNCTION_RETURN C_returns EOL
   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 while_start: . WHILE expression
   57 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   60           | . while_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   60           | while_start EOL LEFT_PARENTHESIS EOL . block RIGHT_PARENTHESIS
   61           | . assign_variable
   62           | . expression ARROW expression
   63           | . expression PLUS expression
   64           | . expression MINUS expression
   65           | . expression ASTERISK expression
   66           | . expression SLASH expression
   67           | . expression OP_AND expression
   68           | . expression OP_OR expression
   69           | . expression OP_MORE_EQUAL expression
   70           | . expression OP_LESS_EQUAL expression
   71           | . expression OP_MORE expression
   72           | . expression OP_LESS expression
   73           | . expression OP_NOT_EQUAL expression
   74           | . expression OP_EQUAL expression
   75           | . monomial
   76           | . list
   77           | . access
   78 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   79     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   80 access: . expression DOT_IDENTIFIER
   81 assign_variable: . IDENTIFIER EQUAL expression
   82                | . access EQUAL expression
   83 monomial: . call
   84         | . STRING_LITERAL
   85         | . FLOAT_LITERAL
   86         | . INT_LITERAL
   87         | . variable
   88 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   91     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   92 variable: . IDENTIFIER

    FUNCTION_DEFINITION     shift, and go to state 1
    CLASS_DEFINITION        shift, and go to state 2
    C_TYPE_DEFINITION       shift, and go to state 3
    C_FUNCTION_DECLARATION  shift, and go to state 4
    IDENTIFIER              shift, and go to state 5
    LEFT_CURLY_BRACE        shift, and go to state 6
    IF                      shift, and go to state 7
    ELSE                    shift, and go to state 8
    FOR                     shift, and go to state 9
    WHILE                   shift, and go to state 10
    GLOBAL                  shift, and go to state 11
    IMPORT                  shift, and go to state 12
    STRING_LITERAL          shift, and go to state 13
    INT_LITERAL             shift, and go to state 14
    FLOAT_LITERAL           shift, and go to state 15

    block                   go to state 166
    lines                   go to state 18
    line                    go to state 19
    import                  go to state 20
    line_content            go to state 21
    definition              go to state 22
    function_definition     go to state 23
    function_start          go to state 24
    class_definition        go to state 25
    class_start             go to state 26
    c_type_definition       go to state 27
    c_type_start            go to state 28
    globals_definition      go to state 29
    global_start            go to state 30
    c_function_declaration  go to state 31
    if_start                go to state 32
    else_start              go to state 33
    for_start               go to state 34
    while_start             go to state 35
    expression              go to state 36
    list                    go to state 37
    access                  go to state 38
    assign_variable         go to state 39
    monomial                go to state 40
    call                    go to state 41
    variable                go to state 42


State 142

   90 call: access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS .

    $default  reduce using rule 90 (call)


State 143

   33 C_type_identifier: . IDENTIFIER
   34                  | . C_type_identifier IDENTIFIER
   37 C_returns: . C_type_identifier
   50 c_function_declaration: C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT EOL C_FUNCTION_RETURN . C_returns EOL

    IDENTIFIER  shift, and go to state 117

    C_type_identifier  go to state 167
    C_returns          go to state 168


State 144

   34 C_type_identifier: C_type_identifier IDENTIFIER .

    $default  reduce using rule 34 (C_type_identifier)


State 145

   33 C_type_identifier: . IDENTIFIER
   34                  | . C_type_identifier IDENTIFIER
   36 C_arguments: C_arguments COMMA . C_type_identifier

    IDENTIFIER  shift, and go to state 117

    C_type_identifier  go to state 169


State 146

   49 c_function_declaration: C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT C_arguments EOL . C_FUNCTION_RETURN C_returns EOL

    C_FUNCTION_RETURN  shift, and go to state 170


State 147

   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   55          | FOR expression COMMA expression COMMA . expression
   56 while_start: . WHILE expression
   57 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   60           | . while_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   61           | . assign_variable
   62           | . expression ARROW expression
   63           | . expression PLUS expression
   64           | . expression MINUS expression
   65           | . expression ASTERISK expression
   66           | . expression SLASH expression
   67           | . expression OP_AND expression
   68           | . expression OP_OR expression
   69           | . expression OP_MORE_EQUAL expression
   70           | . expression OP_LESS_EQUAL expression
   71           | . expression OP_MORE expression
   72           | . expression OP_LESS expression
   73           | . expression OP_NOT_EQUAL expression
   74           | . expression OP_EQUAL expression
   75           | . monomial
   76           | . list
   77           | . access
   78 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   79     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   80 access: . expression DOT_IDENTIFIER
   81 assign_variable: . IDENTIFIER EQUAL expression
   82                | . access EQUAL expression
   83 monomial: . call
   84         | . STRING_LITERAL
   85         | . FLOAT_LITERAL
   86         | . INT_LITERAL
   87         | . variable
   88 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   91     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   92 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    WHILE             shift, and go to state 10
    STRING_LITERAL    shift, and go to state 13
    INT_LITERAL       shift, and go to state 14
    FLOAT_LITERAL     shift, and go to state 15

    if_start         go to state 32
    else_start       go to state 33
    for_start        go to state 34
    while_start      go to state 35
    expression       go to state 171
    list             go to state 37
    access           go to state 38
    assign_variable  go to state 39
    monomial         go to state 40
    call             go to state 41
    variable         go to state 42


State 148

   43 definition_arguments: definition_arguments COMMA IDENTIFIER .

    $default  reduce using rule 43 (definition_arguments)


State 149

   38 return_value: RETURN expression .  [EOL]
   62 expression: expression . ARROW expression
   63           | expression . PLUS expression
   64           | expression . MINUS expression
   65           | expression . ASTERISK expression
   66           | expression . SLASH expression
   67           | expression . OP_AND expression
   68           | expression . OP_OR expression
   69           | expression . OP_MORE_EQUAL expression
   70           | expression . OP_LESS_EQUAL expression
   71           | expression . OP_MORE expression
   72           | expression . OP_LESS expression
   73           | expression . OP_NOT_EQUAL expression
   74           | expression . OP_EQUAL expression
   80 access: expression . DOT_IDENTIFIER

    ARROW           shift, and go to state 65
    OP_AND          shift, and go to state 66
    OP_OR           shift, and go to state 67
    OP_EQUAL        shift, and go to state 68
    OP_NOT_EQUAL    shift, and go to state 69
    OP_MORE_EQUAL   shift, and go to state 70
    OP_LESS_EQUAL   shift, and go to state 71
    OP_MORE         shift, and go to state 72
    OP_LESS         shift, and go to state 73
    PLUS            shift, and go to state 74
    MINUS           shift, and go to state 75
    ASTERISK        shift, and go to state 76
    SLASH           shift, and go to state 77
    DOT_IDENTIFIER  shift, and go to state 78

    $default  reduce using rule 38 (return_value)


State 150

   16 function_definition: function_start arguments EOL block return_value . EOL

    EOL  shift, and go to state 172


State 151

   17 function_definition: function_start arguments EOL return_value EOL .

    $default  reduce using rule 17 (function_definition)


State 152

   27 method_definition: METHOD_DEFINITION arguments . EOL block return_value

    EOL  shift, and go to state 173


State 153

   28 members_definition: MEMBER_IDENTIFIER EQUAL . expression EOL
   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 while_start: . WHILE expression
   57 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   60           | . while_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   61           | . assign_variable
   62           | . expression ARROW expression
   63           | . expression PLUS expression
   64           | . expression MINUS expression
   65           | . expression ASTERISK expression
   66           | . expression SLASH expression
   67           | . expression OP_AND expression
   68           | . expression OP_OR expression
   69           | . expression OP_MORE_EQUAL expression
   70           | . expression OP_LESS_EQUAL expression
   71           | . expression OP_MORE expression
   72           | . expression OP_LESS expression
   73           | . expression OP_NOT_EQUAL expression
   74           | . expression OP_EQUAL expression
   75           | . monomial
   76           | . list
   77           | . access
   78 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   79     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   80 access: . expression DOT_IDENTIFIER
   81 assign_variable: . IDENTIFIER EQUAL expression
   82                | . access EQUAL expression
   83 monomial: . call
   84         | . STRING_LITERAL
   85         | . FLOAT_LITERAL
   86         | . INT_LITERAL
   87         | . variable
   88 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   91     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   92 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    WHILE             shift, and go to state 10
    STRING_LITERAL    shift, and go to state 13
    INT_LITERAL       shift, and go to state 14
    FLOAT_LITERAL     shift, and go to state 15

    if_start         go to state 32
    else_start       go to state 33
    for_start        go to state 34
    while_start      go to state 35
    expression       go to state 174
    list             go to state 37
    access           go to state 38
    assign_variable  go to state 39
    monomial         go to state 40
    call             go to state 41
    variable         go to state 42


State 154

   26 methods: methods method_definition . EOL

    EOL  shift, and go to state 175


State 155

   25 methods: method_definition EOL .

    $default  reduce using rule 25 (methods)


State 156

   29 members_definition: members_definition MEMBER_IDENTIFIER . EQUAL expression EOL

    EQUAL  shift, and go to state 176


State 157

   19 class_definition: class_start arguments EOL members_definition methods .  ["end of file", FUNCTION_DEFINITION, CLASS_DEFINITION, C_TYPE_DEFINITION, C_FUNCTION_DECLARATION, RETURN, IDENTIFIER, RIGHT_PARENTHESIS, LEFT_CURLY_BRACE, IF, ELSE, FOR, WHILE, GLOBAL, IMPORT, STRING_LITERAL, INT_LITERAL, FLOAT_LITERAL]
   26 methods: methods . method_definition EOL
   27 method_definition: . METHOD_DEFINITION arguments EOL block return_value

    METHOD_DEFINITION  shift, and go to state 129

    $default  reduce using rule 19 (class_definition)

    method_definition  go to state 154


State 158

   31 C_members_definition: MEMBER_IDENTIFIER EQUAL C_type_identifier . EOL
   34 C_type_identifier: C_type_identifier . IDENTIFIER

    IDENTIFIER  shift, and go to state 144
    EOL         shift, and go to state 177


State 159

   32 C_members_definition: C_members_definition MEMBER_IDENTIFIER EQUAL . C_type_identifier EOL
   33 C_type_identifier: . IDENTIFIER
   34                  | . C_type_identifier IDENTIFIER

    IDENTIFIER  shift, and go to state 117

    C_type_identifier  go to state 178


State 160

   45 globals_definition: global_start EOL LEFT_PARENTHESIS EOL globals_variables . EOL RIGHT_PARENTHESIS EOL
   48 globals_variables: globals_variables . EOL assign_variable

    EOL  shift, and go to state 179


State 161

   62 expression: expression . ARROW expression
   63           | expression . PLUS expression
   64           | expression . MINUS expression
   65           | expression . ASTERISK expression
   66           | expression . SLASH expression
   67           | expression . OP_AND expression
   68           | expression . OP_OR expression
   69           | expression . OP_MORE_EQUAL expression
   70           | expression . OP_LESS_EQUAL expression
   71           | expression . OP_MORE expression
   72           | expression . OP_LESS expression
   73           | expression . OP_NOT_EQUAL expression
   74           | expression . OP_EQUAL expression
   80 access: expression . DOT_IDENTIFIER

    ARROW           shift, and go to state 65
    OP_AND          shift, and go to state 66
    OP_OR           shift, and go to state 67
    OP_EQUAL        shift, and go to state 68
    OP_NOT_EQUAL    shift, and go to state 69
    OP_MORE_EQUAL   shift, and go to state 70
    OP_LESS_EQUAL   shift, and go to state 71
    OP_MORE         shift, and go to state 72
    OP_LESS         shift, and go to state 73
    PLUS            shift, and go to state 74
    MINUS           shift, and go to state 75
    ASTERISK        shift, and go to state 76
    SLASH           shift, and go to state 77
    DOT_IDENTIFIER  shift, and go to state 78


State 162

   47 globals_variables: assign_variable .  [EOL]
   61 expression: assign_variable .  [ARROW, OP_AND, OP_OR, OP_EQUAL, OP_NOT_EQUAL, OP_MORE_EQUAL, OP_LESS_EQUAL, OP_MORE, OP_LESS, PLUS, MINUS, ASTERISK, SLASH, DOT_IDENTIFIER]

    EOL       reduce using rule 47 (globals_variables)
    $default  reduce using rule 61 (expression)


State 163

    2 block: . lines
    3 lines: . line
    4      | . lines line
    5 line: . line_content EOL
    6     | . line_content "end of file"
    7     | . definition
    8     | . import
    9 import: . IMPORT STRING_LITERAL EOL
   10 line_content: . expression
   11 definition: . function_definition
   12           | . class_definition
   13           | . c_type_definition
   14           | . globals_definition
   15           | . c_function_declaration
   16 function_definition: . function_start arguments EOL block return_value EOL
   17                    | . function_start arguments EOL return_value EOL
   18 function_start: . FUNCTION_DEFINITION
   19 class_definition: . class_start arguments EOL members_definition methods
   20                 | . class_start arguments EOL members_definition
   21                 | . class_start arguments EOL methods
   22 class_start: . CLASS_DEFINITION
   23 c_type_definition: . c_type_start EOL C_members_definition
   24 c_type_start: . C_TYPE_DEFINITION
   45 globals_definition: . global_start EOL LEFT_PARENTHESIS EOL globals_variables EOL RIGHT_PARENTHESIS EOL
   46 global_start: . GLOBAL
   49 c_function_declaration: . C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT C_arguments EOL C_FUNCTION_RETURN C_returns EOL
   50                       | . C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT EOL C_FUNCTION_RETURN C_returns EOL
   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 while_start: . WHILE expression
   57 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   57           | if_start expression EOL LEFT_PARENTHESIS EOL . block RIGHT_PARENTHESIS
   58           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   60           | . while_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   61           | . assign_variable
   62           | . expression ARROW expression
   63           | . expression PLUS expression
   64           | . expression MINUS expression
   65           | . expression ASTERISK expression
   66           | . expression SLASH expression
   67           | . expression OP_AND expression
   68           | . expression OP_OR expression
   69           | . expression OP_MORE_EQUAL expression
   70           | . expression OP_LESS_EQUAL expression
   71           | . expression OP_MORE expression
   72           | . expression OP_LESS expression
   73           | . expression OP_NOT_EQUAL expression
   74           | . expression OP_EQUAL expression
   75           | . monomial
   76           | . list
   77           | . access
   78 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   79     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   80 access: . expression DOT_IDENTIFIER
   81 assign_variable: . IDENTIFIER EQUAL expression
   82                | . access EQUAL expression
   83 monomial: . call
   84         | . STRING_LITERAL
   85         | . FLOAT_LITERAL
   86         | . INT_LITERAL
   87         | . variable
   88 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   91     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   92 variable: . IDENTIFIER

    FUNCTION_DEFINITION     shift, and go to state 1
    CLASS_DEFINITION        shift, and go to state 2
    C_TYPE_DEFINITION       shift, and go to state 3
    C_FUNCTION_DECLARATION  shift, and go to state 4
    IDENTIFIER              shift, and go to state 5
    LEFT_CURLY_BRACE        shift, and go to state 6
    IF                      shift, and go to state 7
    ELSE                    shift, and go to state 8
    FOR                     shift, and go to state 9
    WHILE                   shift, and go to state 10
    GLOBAL                  shift, and go to state 11
    IMPORT                  shift, and go to state 12
    STRING_LITERAL          shift, and go to state 13
    INT_LITERAL             shift, and go to state 14
    FLOAT_LITERAL           shift, and go to state 15

    block                   go to state 180
    lines                   go to state 18
    line                    go to state 19
    import                  go to state 20
    line_content            go to state 21
    definition              go to state 22
    function_definition     go to state 23
    function_start          go to state 24
    class_definition        go to state 25
    class_start             go to state 26
    c_type_definition       go to state 27
    c_type_start            go to state 28
    globals_definition      go to state 29
    global_start            go to state 30
    c_function_declaration  go to state 31
    if_start                go to state 32
    else_start              go to state 33
    for_start               go to state 34
    while_start             go to state 35
    expression              go to state 36
    list                    go to state 37
    access                  go to state 38
    assign_variable         go to state 39
    monomial                go to state 40
    call                    go to state 41
    variable                go to state 42


State 164

   58 expression: else_start EOL LEFT_PARENTHESIS EOL block . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS  shift, and go to state 181


State 165

   59 expression: for_start EOL LEFT_PARENTHESIS EOL block . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS  shift, and go to state 182


State 166

   60 expression: while_start EOL LEFT_PARENTHESIS EOL block . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS  shift, and go to state 183


State 167

   34 C_type_identifier: C_type_identifier . IDENTIFIER
   37 C_returns: C_type_identifier .  [EOL]

    IDENTIFIER  shift, and go to state 144

    $default  reduce using rule 37 (C_returns)


State 168

   50 c_function_declaration: C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT EOL C_FUNCTION_RETURN C_returns . EOL

    EOL  shift, and go to state 184


State 169

   34 C_type_identifier: C_type_identifier . IDENTIFIER
   36 C_arguments: C_arguments COMMA C_type_identifier .  [COMMA, EOL]

    IDENTIFIER  shift, and go to state 144

    $default  reduce using rule 36 (C_arguments)


State 170

   33 C_type_identifier: . IDENTIFIER
   34                  | . C_type_identifier IDENTIFIER
   37 C_returns: . C_type_identifier
   49 c_function_declaration: C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT C_arguments EOL C_FUNCTION_RETURN . C_returns EOL

    IDENTIFIER  shift, and go to state 117

    C_type_identifier  go to state 167
    C_returns          go to state 185


State 171

   55 for_start: FOR expression COMMA expression COMMA expression .  [EOL]
   62 expression: expression . ARROW expression
   63           | expression . PLUS expression
   64           | expression . MINUS expression
   65           | expression . ASTERISK expression
   66           | expression . SLASH expression
   67           | expression . OP_AND expression
   68           | expression . OP_OR expression
   69           | expression . OP_MORE_EQUAL expression
   70           | expression . OP_LESS_EQUAL expression
   71           | expression . OP_MORE expression
   72           | expression . OP_LESS expression
   73           | expression . OP_NOT_EQUAL expression
   74           | expression . OP_EQUAL expression
   80 access: expression . DOT_IDENTIFIER

    ARROW           shift, and go to state 65
    OP_AND          shift, and go to state 66
    OP_OR           shift, and go to state 67
    OP_EQUAL        shift, and go to state 68
    OP_NOT_EQUAL    shift, and go to state 69
    OP_MORE_EQUAL   shift, and go to state 70
    OP_LESS_EQUAL   shift, and go to state 71
    OP_MORE         shift, and go to state 72
    OP_LESS         shift, and go to state 73
    PLUS            shift, and go to state 74
    MINUS           shift, and go to state 75
    ASTERISK        shift, and go to state 76
    SLASH           shift, and go to state 77
    DOT_IDENTIFIER  shift, and go to state 78

    $default  reduce using rule 55 (for_start)


State 172

   16 function_definition: function_start arguments EOL block return_value EOL .

    $default  reduce using rule 16 (function_definition)


State 173

    2 block: . lines
    3 lines: . line
    4      | . lines line
    5 line: . line_content EOL
    6     | . line_content "end of file"
    7     | . definition
    8     | . import
    9 import: . IMPORT STRING_LITERAL EOL
   10 line_content: . expression
   11 definition: . function_definition
   12           | . class_definition
   13           | . c_type_definition
   14           | . globals_definition
   15           | . c_function_declaration
   16 function_definition: . function_start arguments EOL block return_value EOL
   17                    | . function_start arguments EOL return_value EOL
   18 function_start: . FUNCTION_DEFINITION
   19 class_definition: . class_start arguments EOL members_definition methods
   20                 | . class_start arguments EOL members_definition
   21                 | . class_start arguments EOL methods
   22 class_start: . CLASS_DEFINITION
   23 c_type_definition: . c_type_start EOL C_members_definition
   24 c_type_start: . C_TYPE_DEFINITION
   27 method_definition: METHOD_DEFINITION arguments EOL . block return_value
   45 globals_definition: . global_start EOL LEFT_PARENTHESIS EOL globals_variables EOL RIGHT_PARENTHESIS EOL
   46 global_start: . GLOBAL
   49 c_function_declaration: . C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT C_arguments EOL C_FUNCTION_RETURN C_returns EOL
   50                       | . C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT EOL C_FUNCTION_RETURN C_returns EOL
   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 while_start: . WHILE expression
   57 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   60           | . while_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   61           | . assign_variable
   62           | . expression ARROW expression
   63           | . expression PLUS expression
   64           | . expression MINUS expression
   65           | . expression ASTERISK expression
   66           | . expression SLASH expression
   67           | . expression OP_AND expression
   68           | . expression OP_OR expression
   69           | . expression OP_MORE_EQUAL expression
   70           | . expression OP_LESS_EQUAL expression
   71           | . expression OP_MORE expression
   72           | . expression OP_LESS expression
   73           | . expression OP_NOT_EQUAL expression
   74           | . expression OP_EQUAL expression
   75           | . monomial
   76           | . list
   77           | . access
   78 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   79     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   80 access: . expression DOT_IDENTIFIER
   81 assign_variable: . IDENTIFIER EQUAL expression
   82                | . access EQUAL expression
   83 monomial: . call
   84         | . STRING_LITERAL
   85         | . FLOAT_LITERAL
   86         | . INT_LITERAL
   87         | . variable
   88 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   91     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   92 variable: . IDENTIFIER

    FUNCTION_DEFINITION     shift, and go to state 1
    CLASS_DEFINITION        shift, and go to state 2
    C_TYPE_DEFINITION       shift, and go to state 3
    C_FUNCTION_DECLARATION  shift, and go to state 4
    IDENTIFIER              shift, and go to state 5
    LEFT_CURLY_BRACE        shift, and go to state 6
    IF                      shift, and go to state 7
    ELSE                    shift, and go to state 8
    FOR                     shift, and go to state 9
    WHILE                   shift, and go to state 10
    GLOBAL                  shift, and go to state 11
    IMPORT                  shift, and go to state 12
    STRING_LITERAL          shift, and go to state 13
    INT_LITERAL             shift, and go to state 14
    FLOAT_LITERAL           shift, and go to state 15

    block                   go to state 186
    lines                   go to state 18
    line                    go to state 19
    import                  go to state 20
    line_content            go to state 21
    definition              go to state 22
    function_definition     go to state 23
    function_start          go to state 24
    class_definition        go to state 25
    class_start             go to state 26
    c_type_definition       go to state 27
    c_type_start            go to state 28
    globals_definition      go to state 29
    global_start            go to state 30
    c_function_declaration  go to state 31
    if_start                go to state 32
    else_start              go to state 33
    for_start               go to state 34
    while_start             go to state 35
    expression              go to state 36
    list                    go to state 37
    access                  go to state 38
    assign_variable         go to state 39
    monomial                go to state 40
    call                    go to state 41
    variable                go to state 42


State 174

   28 members_definition: MEMBER_IDENTIFIER EQUAL expression . EOL
   62 expression: expression . ARROW expression
   63           | expression . PLUS expression
   64           | expression . MINUS expression
   65           | expression . ASTERISK expression
   66           | expression . SLASH expression
   67           | expression . OP_AND expression
   68           | expression . OP_OR expression
   69           | expression . OP_MORE_EQUAL expression
   70           | expression . OP_LESS_EQUAL expression
   71           | expression . OP_MORE expression
   72           | expression . OP_LESS expression
   73           | expression . OP_NOT_EQUAL expression
   74           | expression . OP_EQUAL expression
   80 access: expression . DOT_IDENTIFIER

    ARROW           shift, and go to state 65
    OP_AND          shift, and go to state 66
    OP_OR           shift, and go to state 67
    OP_EQUAL        shift, and go to state 68
    OP_NOT_EQUAL    shift, and go to state 69
    OP_MORE_EQUAL   shift, and go to state 70
    OP_LESS_EQUAL   shift, and go to state 71
    OP_MORE         shift, and go to state 72
    OP_LESS         shift, and go to state 73
    PLUS            shift, and go to state 74
    MINUS           shift, and go to state 75
    ASTERISK        shift, and go to state 76
    SLASH           shift, and go to state 77
    DOT_IDENTIFIER  shift, and go to state 78
    EOL             shift, and go to state 187


State 175

   26 methods: methods method_definition EOL .

    $default  reduce using rule 26 (methods)


State 176

   29 members_definition: members_definition MEMBER_IDENTIFIER EQUAL . expression EOL
   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 while_start: . WHILE expression
   57 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   60           | . while_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   61           | . assign_variable
   62           | . expression ARROW expression
   63           | . expression PLUS expression
   64           | . expression MINUS expression
   65           | . expression ASTERISK expression
   66           | . expression SLASH expression
   67           | . expression OP_AND expression
   68           | . expression OP_OR expression
   69           | . expression OP_MORE_EQUAL expression
   70           | . expression OP_LESS_EQUAL expression
   71           | . expression OP_MORE expression
   72           | . expression OP_LESS expression
   73           | . expression OP_NOT_EQUAL expression
   74           | . expression OP_EQUAL expression
   75           | . monomial
   76           | . list
   77           | . access
   78 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   79     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   80 access: . expression DOT_IDENTIFIER
   81 assign_variable: . IDENTIFIER EQUAL expression
   82                | . access EQUAL expression
   83 monomial: . call
   84         | . STRING_LITERAL
   85         | . FLOAT_LITERAL
   86         | . INT_LITERAL
   87         | . variable
   88 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   91     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   92 variable: . IDENTIFIER

    IDENTIFIER        shift, and go to state 5
    LEFT_CURLY_BRACE  shift, and go to state 6
    IF                shift, and go to state 7
    ELSE              shift, and go to state 8
    FOR               shift, and go to state 9
    WHILE             shift, and go to state 10
    STRING_LITERAL    shift, and go to state 13
    INT_LITERAL       shift, and go to state 14
    FLOAT_LITERAL     shift, and go to state 15

    if_start         go to state 32
    else_start       go to state 33
    for_start        go to state 34
    while_start      go to state 35
    expression       go to state 188
    list             go to state 37
    access           go to state 38
    assign_variable  go to state 39
    monomial         go to state 40
    call             go to state 41
    variable         go to state 42


State 177

   31 C_members_definition: MEMBER_IDENTIFIER EQUAL C_type_identifier EOL .

    $default  reduce using rule 31 (C_members_definition)


State 178

   32 C_members_definition: C_members_definition MEMBER_IDENTIFIER EQUAL C_type_identifier . EOL
   34 C_type_identifier: C_type_identifier . IDENTIFIER

    IDENTIFIER  shift, and go to state 144
    EOL         shift, and go to state 189


State 179

   45 globals_definition: global_start EOL LEFT_PARENTHESIS EOL globals_variables EOL . RIGHT_PARENTHESIS EOL
   48 globals_variables: globals_variables EOL . assign_variable
   53 if_start: . IF
   54 else_start: . ELSE
   55 for_start: . FOR expression COMMA expression COMMA expression
   56 while_start: . WHILE expression
   57 expression: . if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   58           | . else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   59           | . for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   60           | . while_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS
   61           | . assign_variable
   62           | . expression ARROW expression
   63           | . expression PLUS expression
   64           | . expression MINUS expression
   65           | . expression ASTERISK expression
   66           | . expression SLASH expression
   67           | . expression OP_AND expression
   68           | . expression OP_OR expression
   69           | . expression OP_MORE_EQUAL expression
   70           | . expression OP_LESS_EQUAL expression
   71           | . expression OP_MORE expression
   72           | . expression OP_LESS expression
   73           | . expression OP_NOT_EQUAL expression
   74           | . expression OP_EQUAL expression
   75           | . monomial
   76           | . list
   77           | . access
   78 list: . LEFT_CURLY_BRACE expressions RIGHT_CURLY_BRACE
   79     | . LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
   80 access: . expression DOT_IDENTIFIER
   81 assign_variable: . IDENTIFIER EQUAL expression
   82                | . access EQUAL expression
   83 monomial: . call
   84         | . STRING_LITERAL
   85         | . FLOAT_LITERAL
   86         | . INT_LITERAL
   87         | . variable
   88 call: . IDENTIFIER LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   89     | . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
   90     | . access LEFT_PARENTHESIS expressions RIGHT_PARENTHESIS
   91     | . access LEFT_PARENTHESIS RIGHT_PARENTHESIS
   92 variable: . IDENTIFIER

    IDENTIFIER         shift, and go to state 5
    RIGHT_PARENTHESIS  shift, and go to state 190
    LEFT_CURLY_BRACE   shift, and go to state 6
    IF                 shift, and go to state 7
    ELSE               shift, and go to state 8
    FOR                shift, and go to state 9
    WHILE              shift, and go to state 10
    STRING_LITERAL     shift, and go to state 13
    INT_LITERAL        shift, and go to state 14
    FLOAT_LITERAL      shift, and go to state 15

    if_start         go to state 32
    else_start       go to state 33
    for_start        go to state 34
    while_start      go to state 35
    expression       go to state 161
    list             go to state 37
    access           go to state 38
    assign_variable  go to state 191
    monomial         go to state 40
    call             go to state 41
    variable         go to state 42


State 180

   57 expression: if_start expression EOL LEFT_PARENTHESIS EOL block . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS  shift, and go to state 192


State 181

   58 expression: else_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS .

    $default  reduce using rule 58 (expression)


State 182

   59 expression: for_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS .

    $default  reduce using rule 59 (expression)


State 183

   60 expression: while_start EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS .

    $default  reduce using rule 60 (expression)


State 184

   50 c_function_declaration: C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT EOL C_FUNCTION_RETURN C_returns EOL .

    $default  reduce using rule 50 (c_function_declaration)


State 185

   49 c_function_declaration: C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT C_arguments EOL C_FUNCTION_RETURN C_returns . EOL

    EOL  shift, and go to state 193


State 186

   27 method_definition: METHOD_DEFINITION arguments EOL block . return_value
   38 return_value: . RETURN expression
   39             | . RETURN

    RETURN  shift, and go to state 126

    return_value  go to state 194


State 187

   28 members_definition: MEMBER_IDENTIFIER EQUAL expression EOL .

    $default  reduce using rule 28 (members_definition)


State 188

   29 members_definition: members_definition MEMBER_IDENTIFIER EQUAL expression . EOL
   62 expression: expression . ARROW expression
   63           | expression . PLUS expression
   64           | expression . MINUS expression
   65           | expression . ASTERISK expression
   66           | expression . SLASH expression
   67           | expression . OP_AND expression
   68           | expression . OP_OR expression
   69           | expression . OP_MORE_EQUAL expression
   70           | expression . OP_LESS_EQUAL expression
   71           | expression . OP_MORE expression
   72           | expression . OP_LESS expression
   73           | expression . OP_NOT_EQUAL expression
   74           | expression . OP_EQUAL expression
   80 access: expression . DOT_IDENTIFIER

    ARROW           shift, and go to state 65
    OP_AND          shift, and go to state 66
    OP_OR           shift, and go to state 67
    OP_EQUAL        shift, and go to state 68
    OP_NOT_EQUAL    shift, and go to state 69
    OP_MORE_EQUAL   shift, and go to state 70
    OP_LESS_EQUAL   shift, and go to state 71
    OP_MORE         shift, and go to state 72
    OP_LESS         shift, and go to state 73
    PLUS            shift, and go to state 74
    MINUS           shift, and go to state 75
    ASTERISK        shift, and go to state 76
    SLASH           shift, and go to state 77
    DOT_IDENTIFIER  shift, and go to state 78
    EOL             shift, and go to state 195


State 189

   32 C_members_definition: C_members_definition MEMBER_IDENTIFIER EQUAL C_type_identifier EOL .

    $default  reduce using rule 32 (C_members_definition)


State 190

   45 globals_definition: global_start EOL LEFT_PARENTHESIS EOL globals_variables EOL RIGHT_PARENTHESIS . EOL

    EOL  shift, and go to state 196


State 191

   48 globals_variables: globals_variables EOL assign_variable .  [EOL]
   61 expression: assign_variable .  [ARROW, OP_AND, OP_OR, OP_EQUAL, OP_NOT_EQUAL, OP_MORE_EQUAL, OP_LESS_EQUAL, OP_MORE, OP_LESS, PLUS, MINUS, ASTERISK, SLASH, DOT_IDENTIFIER]

    EOL       reduce using rule 48 (globals_variables)
    $default  reduce using rule 61 (expression)


State 192

   57 expression: if_start expression EOL LEFT_PARENTHESIS EOL block RIGHT_PARENTHESIS .

    $default  reduce using rule 57 (expression)


State 193

   49 c_function_declaration: C_FUNCTION_DECLARATION EOL C_FUNCTION_ARGUMENT C_arguments EOL C_FUNCTION_RETURN C_returns EOL .

    $default  reduce using rule 49 (c_function_declaration)


State 194

   27 method_definition: METHOD_DEFINITION arguments EOL block return_value .

    $default  reduce using rule 27 (method_definition)


State 195

   29 members_definition: members_definition MEMBER_IDENTIFIER EQUAL expression EOL .

    $default  reduce using rule 29 (members_definition)


State 196

   45 globals_definition: global_start EOL LEFT_PARENTHESIS EOL globals_variables EOL RIGHT_PARENTHESIS EOL .

    $default  reduce using rule 45 (globals_definition)
